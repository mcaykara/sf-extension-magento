/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body51', 'model/Body52', 'model/Body53', 'model/Body54', 'model/ErrorResponse', 'model/QuoteDataCartItemInterface'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body51'), require('../model/Body52'), require('../model/Body53'), require('../model/Body54'), require('../model/ErrorResponse'), require('../model/QuoteDataCartItemInterface'));
  } else {
    // Browser globals (root is window)
    if (!root.magento) {
      root.magento = {};
    }
    root.magento.QuoteCartItemRepositoryV1Api = factory(root.magento.ApiClient, root.magento.Body51, root.magento.Body52, root.magento.Body53, root.magento.Body54, root.magento.ErrorResponse, root.magento.QuoteDataCartItemInterface);
  }
}(this, function(ApiClient, Body51, Body52, Body53, Body54, ErrorResponse, QuoteDataCartItemInterface) {
  'use strict';

  /**
   * QuoteCartItemRepositoryV1 service.
   * @module api/QuoteCartItemRepositoryV1Api
   * @version 2.0
   */

  /**
   * Constructs a new QuoteCartItemRepositoryV1Api. 
   * @alias module:api/QuoteCartItemRepositoryV1Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the quoteCartItemRepositoryV1DeleteByIdDelete operation.
     * @callback module:api/QuoteCartItemRepositoryV1Api~quoteCartItemRepositoryV1DeleteByIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified item from the specified cart.
     * @param {Number} cartId The cart ID.
     * @param {Number} itemId The item ID of the item to be removed.
     * @param {module:api/QuoteCartItemRepositoryV1Api~quoteCartItemRepositoryV1DeleteByIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.quoteCartItemRepositoryV1DeleteByIdDelete = function(cartId, itemId, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling quoteCartItemRepositoryV1DeleteByIdDelete");
      }

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling quoteCartItemRepositoryV1DeleteByIdDelete");
      }


      var pathParams = {
        'cartId': cartId,
        'itemId': itemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/V1/carts/{cartId}/items/{itemId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteCartItemRepositoryV1DeleteByIdDelete_0 operation.
     * @callback module:api/QuoteCartItemRepositoryV1Api~quoteCartItemRepositoryV1DeleteByIdDelete_0Callback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified item from the specified cart.
     * @param {Number} itemId The item ID of the item to be removed.
     * @param {module:api/QuoteCartItemRepositoryV1Api~quoteCartItemRepositoryV1DeleteByIdDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.quoteCartItemRepositoryV1DeleteByIdDelete_0 = function(itemId, callback) {
      var postBody = null;

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling quoteCartItemRepositoryV1DeleteByIdDelete_0");
      }


      var pathParams = {
        'itemId': itemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/V1/carts/mine/items/{itemId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteCartItemRepositoryV1GetListGet operation.
     * @callback module:api/QuoteCartItemRepositoryV1Api~quoteCartItemRepositoryV1GetListGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuoteDataCartItemInterface>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists items that are assigned to a specified cart.
     * @param {Number} cartId The cart ID.
     * @param {module:api/QuoteCartItemRepositoryV1Api~quoteCartItemRepositoryV1GetListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuoteDataCartItemInterface>}
     */
    this.quoteCartItemRepositoryV1GetListGet = function(cartId, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling quoteCartItemRepositoryV1GetListGet");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [QuoteDataCartItemInterface];

      return this.apiClient.callApi(
        '/V1/carts/{cartId}/items', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteCartItemRepositoryV1GetListGet_0 operation.
     * @callback module:api/QuoteCartItemRepositoryV1Api~quoteCartItemRepositoryV1GetListGet_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuoteDataCartItemInterface>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists items that are assigned to a specified cart.
     * @param {module:api/QuoteCartItemRepositoryV1Api~quoteCartItemRepositoryV1GetListGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuoteDataCartItemInterface>}
     */
    this.quoteCartItemRepositoryV1GetListGet_0 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [QuoteDataCartItemInterface];

      return this.apiClient.callApi(
        '/V1/carts/mine/items', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteCartItemRepositoryV1SavePost operation.
     * @callback module:api/QuoteCartItemRepositoryV1Api~quoteCartItemRepositoryV1SavePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteDataCartItemInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the specified item to the specified cart.
     * @param {String} cartId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body51} opts.body 
     * @param {module:api/QuoteCartItemRepositoryV1Api~quoteCartItemRepositoryV1SavePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteDataCartItemInterface}
     */
    this.quoteCartItemRepositoryV1SavePost = function(cartId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling quoteCartItemRepositoryV1SavePost");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = QuoteDataCartItemInterface;

      return this.apiClient.callApi(
        '/V1/carts/{cartId}/items', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteCartItemRepositoryV1SavePost_0 operation.
     * @callback module:api/QuoteCartItemRepositoryV1Api~quoteCartItemRepositoryV1SavePost_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteDataCartItemInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the specified item to the specified cart.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body53} opts.body 
     * @param {module:api/QuoteCartItemRepositoryV1Api~quoteCartItemRepositoryV1SavePost_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteDataCartItemInterface}
     */
    this.quoteCartItemRepositoryV1SavePost_0 = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = QuoteDataCartItemInterface;

      return this.apiClient.callApi(
        '/V1/carts/mine/items', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteCartItemRepositoryV1SavePut operation.
     * @callback module:api/QuoteCartItemRepositoryV1Api~quoteCartItemRepositoryV1SavePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteDataCartItemInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the specified item to the specified cart.
     * @param {String} cartId 
     * @param {String} itemId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body52} opts.body 
     * @param {module:api/QuoteCartItemRepositoryV1Api~quoteCartItemRepositoryV1SavePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteDataCartItemInterface}
     */
    this.quoteCartItemRepositoryV1SavePut = function(cartId, itemId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling quoteCartItemRepositoryV1SavePut");
      }

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling quoteCartItemRepositoryV1SavePut");
      }


      var pathParams = {
        'cartId': cartId,
        'itemId': itemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = QuoteDataCartItemInterface;

      return this.apiClient.callApi(
        '/V1/carts/{cartId}/items/{itemId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteCartItemRepositoryV1SavePut_0 operation.
     * @callback module:api/QuoteCartItemRepositoryV1Api~quoteCartItemRepositoryV1SavePut_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteDataCartItemInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the specified item to the specified cart.
     * @param {String} itemId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body54} opts.body 
     * @param {module:api/QuoteCartItemRepositoryV1Api~quoteCartItemRepositoryV1SavePut_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteDataCartItemInterface}
     */
    this.quoteCartItemRepositoryV1SavePut_0 = function(itemId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling quoteCartItemRepositoryV1SavePut_0");
      }


      var pathParams = {
        'itemId': itemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = QuoteDataCartItemInterface;

      return this.apiClient.callApi(
        '/V1/carts/mine/items/{itemId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
