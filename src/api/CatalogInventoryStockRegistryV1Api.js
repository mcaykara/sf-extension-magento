/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body82', 'model/CatalogInventoryDataStockItemInterface', 'model/CatalogInventoryDataStockStatusCollectionInterface', 'model/CatalogInventoryDataStockStatusInterface', 'model/ErrorResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body82'), require('../model/CatalogInventoryDataStockItemInterface'), require('../model/CatalogInventoryDataStockStatusCollectionInterface'), require('../model/CatalogInventoryDataStockStatusInterface'), require('../model/ErrorResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.magento) {
      root.magento = {};
    }
    root.magento.CatalogInventoryStockRegistryV1Api = factory(root.magento.ApiClient, root.magento.Body82, root.magento.CatalogInventoryDataStockItemInterface, root.magento.CatalogInventoryDataStockStatusCollectionInterface, root.magento.CatalogInventoryDataStockStatusInterface, root.magento.ErrorResponse);
  }
}(this, function(ApiClient, Body82, CatalogInventoryDataStockItemInterface, CatalogInventoryDataStockStatusCollectionInterface, CatalogInventoryDataStockStatusInterface, ErrorResponse) {
  'use strict';

  /**
   * CatalogInventoryStockRegistryV1 service.
   * @module api/CatalogInventoryStockRegistryV1Api
   * @version 2.0
   */

  /**
   * Constructs a new CatalogInventoryStockRegistryV1Api. 
   * @alias module:api/CatalogInventoryStockRegistryV1Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the catalogInventoryStockRegistryV1GetLowStockItemsGet operation.
     * @callback module:api/CatalogInventoryStockRegistryV1Api~catalogInventoryStockRegistryV1GetLowStockItemsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogInventoryDataStockStatusCollectionInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of SKU&#39;s with low inventory qty
     * @param {Number} scopeId 
     * @param {Number} qty 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.currentPage 
     * @param {Number} opts.pageSize 
     * @param {module:api/CatalogInventoryStockRegistryV1Api~catalogInventoryStockRegistryV1GetLowStockItemsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogInventoryDataStockStatusCollectionInterface}
     */
    this.catalogInventoryStockRegistryV1GetLowStockItemsGet = function(scopeId, qty, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scopeId' is set
      if (scopeId === undefined || scopeId === null) {
        throw new Error("Missing the required parameter 'scopeId' when calling catalogInventoryStockRegistryV1GetLowStockItemsGet");
      }

      // verify the required parameter 'qty' is set
      if (qty === undefined || qty === null) {
        throw new Error("Missing the required parameter 'qty' when calling catalogInventoryStockRegistryV1GetLowStockItemsGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'scopeId': scopeId,
        'qty': qty,
        'currentPage': opts['currentPage'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = CatalogInventoryDataStockStatusCollectionInterface;

      return this.apiClient.callApi(
        '/V1/stockItems/lowStock/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogInventoryStockRegistryV1GetStockItemBySkuGet operation.
     * @callback module:api/CatalogInventoryStockRegistryV1Api~catalogInventoryStockRegistryV1GetStockItemBySkuGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogInventoryDataStockItemInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} productSku 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.scopeId 
     * @param {module:api/CatalogInventoryStockRegistryV1Api~catalogInventoryStockRegistryV1GetStockItemBySkuGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogInventoryDataStockItemInterface}
     */
    this.catalogInventoryStockRegistryV1GetStockItemBySkuGet = function(productSku, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productSku' is set
      if (productSku === undefined || productSku === null) {
        throw new Error("Missing the required parameter 'productSku' when calling catalogInventoryStockRegistryV1GetStockItemBySkuGet");
      }


      var pathParams = {
        'productSku': productSku
      };
      var queryParams = {
        'scopeId': opts['scopeId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = CatalogInventoryDataStockItemInterface;

      return this.apiClient.callApi(
        '/V1/stockItems/{productSku}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogInventoryStockRegistryV1GetStockStatusBySkuGet operation.
     * @callback module:api/CatalogInventoryStockRegistryV1Api~catalogInventoryStockRegistryV1GetStockStatusBySkuGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogInventoryDataStockStatusInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} productSku 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.scopeId 
     * @param {module:api/CatalogInventoryStockRegistryV1Api~catalogInventoryStockRegistryV1GetStockStatusBySkuGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogInventoryDataStockStatusInterface}
     */
    this.catalogInventoryStockRegistryV1GetStockStatusBySkuGet = function(productSku, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productSku' is set
      if (productSku === undefined || productSku === null) {
        throw new Error("Missing the required parameter 'productSku' when calling catalogInventoryStockRegistryV1GetStockStatusBySkuGet");
      }


      var pathParams = {
        'productSku': productSku
      };
      var queryParams = {
        'scopeId': opts['scopeId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = CatalogInventoryDataStockStatusInterface;

      return this.apiClient.callApi(
        '/V1/stockStatuses/{productSku}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogInventoryStockRegistryV1UpdateStockItemBySkuPut operation.
     * @callback module:api/CatalogInventoryStockRegistryV1Api~catalogInventoryStockRegistryV1UpdateStockItemBySkuPutCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} productSku 
     * @param {String} itemId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body82} opts.body 
     * @param {module:api/CatalogInventoryStockRegistryV1Api~catalogInventoryStockRegistryV1UpdateStockItemBySkuPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.catalogInventoryStockRegistryV1UpdateStockItemBySkuPut = function(productSku, itemId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'productSku' is set
      if (productSku === undefined || productSku === null) {
        throw new Error("Missing the required parameter 'productSku' when calling catalogInventoryStockRegistryV1UpdateStockItemBySkuPut");
      }

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling catalogInventoryStockRegistryV1UpdateStockItemBySkuPut");
      }


      var pathParams = {
        'productSku': productSku,
        'itemId': itemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/V1/products/{productSku}/stockItems/{itemId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
