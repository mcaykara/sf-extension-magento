/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body125', 'model/Body126', 'model/BundleDataLinkInterface', 'model/ErrorResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body125'), require('../model/Body126'), require('../model/BundleDataLinkInterface'), require('../model/ErrorResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.magento) {
      root.magento = {};
    }
    root.magento.BundleProductLinkManagementV1Api = factory(root.magento.ApiClient, root.magento.Body125, root.magento.Body126, root.magento.BundleDataLinkInterface, root.magento.ErrorResponse);
  }
}(this, function(ApiClient, Body125, Body126, BundleDataLinkInterface, ErrorResponse) {
  'use strict';

  /**
   * BundleProductLinkManagementV1 service.
   * @module api/BundleProductLinkManagementV1Api
   * @version 2.0
   */

  /**
   * Constructs a new BundleProductLinkManagementV1Api. 
   * @alias module:api/BundleProductLinkManagementV1Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the bundleProductLinkManagementV1AddChildByProductSkuPost operation.
     * @callback module:api/BundleProductLinkManagementV1Api~bundleProductLinkManagementV1AddChildByProductSkuPostCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add child product to specified Bundle option by product sku
     * @param {String} sku 
     * @param {Number} optionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body125} opts.body 
     * @param {module:api/BundleProductLinkManagementV1Api~bundleProductLinkManagementV1AddChildByProductSkuPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.bundleProductLinkManagementV1AddChildByProductSkuPost = function(sku, optionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'sku' is set
      if (sku === undefined || sku === null) {
        throw new Error("Missing the required parameter 'sku' when calling bundleProductLinkManagementV1AddChildByProductSkuPost");
      }

      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling bundleProductLinkManagementV1AddChildByProductSkuPost");
      }


      var pathParams = {
        'sku': sku,
        'optionId': optionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/V1/bundle-products/{sku}/links/{optionId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bundleProductLinkManagementV1GetChildrenGet operation.
     * @callback module:api/BundleProductLinkManagementV1Api~bundleProductLinkManagementV1GetChildrenGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BundleDataLinkInterface>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all children for Bundle product
     * @param {String} productSku 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.optionId 
     * @param {module:api/BundleProductLinkManagementV1Api~bundleProductLinkManagementV1GetChildrenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BundleDataLinkInterface>}
     */
    this.bundleProductLinkManagementV1GetChildrenGet = function(productSku, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productSku' is set
      if (productSku === undefined || productSku === null) {
        throw new Error("Missing the required parameter 'productSku' when calling bundleProductLinkManagementV1GetChildrenGet");
      }


      var pathParams = {
        'productSku': productSku
      };
      var queryParams = {
        'optionId': opts['optionId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [BundleDataLinkInterface];

      return this.apiClient.callApi(
        '/V1/bundle-products/{productSku}/children', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bundleProductLinkManagementV1RemoveChildDelete operation.
     * @callback module:api/BundleProductLinkManagementV1Api~bundleProductLinkManagementV1RemoveChildDeleteCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove product from Bundle product option
     * @param {String} sku 
     * @param {Number} optionId 
     * @param {String} childSku 
     * @param {module:api/BundleProductLinkManagementV1Api~bundleProductLinkManagementV1RemoveChildDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.bundleProductLinkManagementV1RemoveChildDelete = function(sku, optionId, childSku, callback) {
      var postBody = null;

      // verify the required parameter 'sku' is set
      if (sku === undefined || sku === null) {
        throw new Error("Missing the required parameter 'sku' when calling bundleProductLinkManagementV1RemoveChildDelete");
      }

      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling bundleProductLinkManagementV1RemoveChildDelete");
      }

      // verify the required parameter 'childSku' is set
      if (childSku === undefined || childSku === null) {
        throw new Error("Missing the required parameter 'childSku' when calling bundleProductLinkManagementV1RemoveChildDelete");
      }


      var pathParams = {
        'sku': sku,
        'optionId': optionId,
        'childSku': childSku
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/V1/bundle-products/{sku}/options/{optionId}/children/{childSku}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bundleProductLinkManagementV1SaveChildPut operation.
     * @callback module:api/BundleProductLinkManagementV1Api~bundleProductLinkManagementV1SaveChildPutCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sku 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body126} opts.body 
     * @param {module:api/BundleProductLinkManagementV1Api~bundleProductLinkManagementV1SaveChildPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.bundleProductLinkManagementV1SaveChildPut = function(sku, id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'sku' is set
      if (sku === undefined || sku === null) {
        throw new Error("Missing the required parameter 'sku' when calling bundleProductLinkManagementV1SaveChildPut");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bundleProductLinkManagementV1SaveChildPut");
      }


      var pathParams = {
        'sku': sku,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/V1/bundle-products/{sku}/links/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
