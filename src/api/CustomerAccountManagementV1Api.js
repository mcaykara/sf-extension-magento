/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body10', 'model/Body11', 'model/Body12', 'model/Body13', 'model/Body6', 'model/Body7', 'model/Body8', 'model/Body9', 'model/CustomerDataAddressInterface', 'model/CustomerDataCustomerInterface', 'model/CustomerDataValidationResultsInterface', 'model/ErrorResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body10'), require('../model/Body11'), require('../model/Body12'), require('../model/Body13'), require('../model/Body6'), require('../model/Body7'), require('../model/Body8'), require('../model/Body9'), require('../model/CustomerDataAddressInterface'), require('../model/CustomerDataCustomerInterface'), require('../model/CustomerDataValidationResultsInterface'), require('../model/ErrorResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.magento) {
      root.magento = {};
    }
    root.magento.CustomerAccountManagementV1Api = factory(root.magento.ApiClient, root.magento.Body10, root.magento.Body11, root.magento.Body12, root.magento.Body13, root.magento.Body6, root.magento.Body7, root.magento.Body8, root.magento.Body9, root.magento.CustomerDataAddressInterface, root.magento.CustomerDataCustomerInterface, root.magento.CustomerDataValidationResultsInterface, root.magento.ErrorResponse);
  }
}(this, function(ApiClient, Body10, Body11, Body12, Body13, Body6, Body7, Body8, Body9, CustomerDataAddressInterface, CustomerDataCustomerInterface, CustomerDataValidationResultsInterface, ErrorResponse) {
  'use strict';

  /**
   * CustomerAccountManagementV1 service.
   * @module api/CustomerAccountManagementV1Api
   * @version 2.0
   */

  /**
   * Constructs a new CustomerAccountManagementV1Api. 
   * @alias module:api/CustomerAccountManagementV1Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the customerAccountManagementV1ActivateByIdPut operation.
     * @callback module:api/CustomerAccountManagementV1Api~customerAccountManagementV1ActivateByIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDataCustomerInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate a customer account using a key that was sent in a confirmation email.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body7} opts.body 
     * @param {module:api/CustomerAccountManagementV1Api~customerAccountManagementV1ActivateByIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDataCustomerInterface}
     */
    this.customerAccountManagementV1ActivateByIdPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = CustomerDataCustomerInterface;

      return this.apiClient.callApi(
        '/V1/customers/me/activate', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerAccountManagementV1ActivatePut operation.
     * @callback module:api/CustomerAccountManagementV1Api~customerAccountManagementV1ActivatePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDataCustomerInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate a customer account using a key that was sent in a confirmation email.
     * @param {String} email 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body8} opts.body 
     * @param {module:api/CustomerAccountManagementV1Api~customerAccountManagementV1ActivatePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDataCustomerInterface}
     */
    this.customerAccountManagementV1ActivatePut = function(email, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling customerAccountManagementV1ActivatePut");
      }


      var pathParams = {
        'email': email
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = CustomerDataCustomerInterface;

      return this.apiClient.callApi(
        '/V1/customers/{email}/activate', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerAccountManagementV1ChangePasswordByIdPut operation.
     * @callback module:api/CustomerAccountManagementV1Api~customerAccountManagementV1ChangePasswordByIdPutCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change customer password.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body9} opts.body 
     * @param {module:api/CustomerAccountManagementV1Api~customerAccountManagementV1ChangePasswordByIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.customerAccountManagementV1ChangePasswordByIdPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/V1/customers/me/password', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerAccountManagementV1CreateAccountPost operation.
     * @callback module:api/CustomerAccountManagementV1Api~customerAccountManagementV1CreateAccountPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDataCustomerInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create customer account. Perform necessary business operations like sending email.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body6} opts.body 
     * @param {module:api/CustomerAccountManagementV1Api~customerAccountManagementV1CreateAccountPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDataCustomerInterface}
     */
    this.customerAccountManagementV1CreateAccountPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = CustomerDataCustomerInterface;

      return this.apiClient.callApi(
        '/V1/customers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerAccountManagementV1GetConfirmationStatusGet operation.
     * @callback module:api/CustomerAccountManagementV1Api~customerAccountManagementV1GetConfirmationStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the account confirmation status.
     * @param {Number} customerId 
     * @param {module:api/CustomerAccountManagementV1Api~customerAccountManagementV1GetConfirmationStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.customerAccountManagementV1GetConfirmationStatusGet = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customerAccountManagementV1GetConfirmationStatusGet");
      }


      var pathParams = {
        'customerId': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/V1/customers/{customerId}/confirm', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerAccountManagementV1GetDefaultBillingAddressGet operation.
     * @callback module:api/CustomerAccountManagementV1Api~customerAccountManagementV1GetDefaultBillingAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDataAddressInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve default billing address for the given customerId.
     * @param {module:api/CustomerAccountManagementV1Api~customerAccountManagementV1GetDefaultBillingAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDataAddressInterface}
     */
    this.customerAccountManagementV1GetDefaultBillingAddressGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = CustomerDataAddressInterface;

      return this.apiClient.callApi(
        '/V1/customers/me/billingAddress', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerAccountManagementV1GetDefaultBillingAddressGet_0 operation.
     * @callback module:api/CustomerAccountManagementV1Api~customerAccountManagementV1GetDefaultBillingAddressGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDataAddressInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve default billing address for the given customerId.
     * @param {Number} customerId 
     * @param {module:api/CustomerAccountManagementV1Api~customerAccountManagementV1GetDefaultBillingAddressGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDataAddressInterface}
     */
    this.customerAccountManagementV1GetDefaultBillingAddressGet_0 = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customerAccountManagementV1GetDefaultBillingAddressGet_0");
      }


      var pathParams = {
        'customerId': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = CustomerDataAddressInterface;

      return this.apiClient.callApi(
        '/V1/customers/{customerId}/billingAddress', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerAccountManagementV1GetDefaultShippingAddressGet operation.
     * @callback module:api/CustomerAccountManagementV1Api~customerAccountManagementV1GetDefaultShippingAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDataAddressInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve default shipping address for the given customerId.
     * @param {module:api/CustomerAccountManagementV1Api~customerAccountManagementV1GetDefaultShippingAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDataAddressInterface}
     */
    this.customerAccountManagementV1GetDefaultShippingAddressGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = CustomerDataAddressInterface;

      return this.apiClient.callApi(
        '/V1/customers/me/shippingAddress', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerAccountManagementV1GetDefaultShippingAddressGet_0 operation.
     * @callback module:api/CustomerAccountManagementV1Api~customerAccountManagementV1GetDefaultShippingAddressGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDataAddressInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve default shipping address for the given customerId.
     * @param {Number} customerId 
     * @param {module:api/CustomerAccountManagementV1Api~customerAccountManagementV1GetDefaultShippingAddressGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDataAddressInterface}
     */
    this.customerAccountManagementV1GetDefaultShippingAddressGet_0 = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customerAccountManagementV1GetDefaultShippingAddressGet_0");
      }


      var pathParams = {
        'customerId': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = CustomerDataAddressInterface;

      return this.apiClient.callApi(
        '/V1/customers/{customerId}/shippingAddress', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerAccountManagementV1InitiatePasswordResetPut operation.
     * @callback module:api/CustomerAccountManagementV1Api~customerAccountManagementV1InitiatePasswordResetPutCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an email to the customer with a password reset link.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body10} opts.body 
     * @param {module:api/CustomerAccountManagementV1Api~customerAccountManagementV1InitiatePasswordResetPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.customerAccountManagementV1InitiatePasswordResetPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/V1/customers/password', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerAccountManagementV1IsEmailAvailablePost operation.
     * @callback module:api/CustomerAccountManagementV1Api~customerAccountManagementV1IsEmailAvailablePostCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if given email is associated with a customer account in given website.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body13} opts.body 
     * @param {module:api/CustomerAccountManagementV1Api~customerAccountManagementV1IsEmailAvailablePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.customerAccountManagementV1IsEmailAvailablePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/V1/customers/isEmailAvailable', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerAccountManagementV1IsReadonlyGet operation.
     * @callback module:api/CustomerAccountManagementV1Api~customerAccountManagementV1IsReadonlyGetCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if customer can be deleted.
     * @param {Number} customerId 
     * @param {module:api/CustomerAccountManagementV1Api~customerAccountManagementV1IsReadonlyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.customerAccountManagementV1IsReadonlyGet = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customerAccountManagementV1IsReadonlyGet");
      }


      var pathParams = {
        'customerId': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/V1/customers/{customerId}/permissions/readonly', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerAccountManagementV1ResendConfirmationPost operation.
     * @callback module:api/CustomerAccountManagementV1Api~customerAccountManagementV1ResendConfirmationPostCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend confirmation email.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body11} opts.body 
     * @param {module:api/CustomerAccountManagementV1Api~customerAccountManagementV1ResendConfirmationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.customerAccountManagementV1ResendConfirmationPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/V1/customers/confirm', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerAccountManagementV1ValidatePut operation.
     * @callback module:api/CustomerAccountManagementV1Api~customerAccountManagementV1ValidatePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDataValidationResultsInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate customer data.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body12} opts.body 
     * @param {module:api/CustomerAccountManagementV1Api~customerAccountManagementV1ValidatePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDataValidationResultsInterface}
     */
    this.customerAccountManagementV1ValidatePut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = CustomerDataValidationResultsInterface;

      return this.apiClient.callApi(
        '/V1/customers/validate', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerAccountManagementV1ValidateResetPasswordLinkTokenGet operation.
     * @callback module:api/CustomerAccountManagementV1Api~customerAccountManagementV1ValidateResetPasswordLinkTokenGetCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if password reset token is valid.
     * @param {Number} customerId 
     * @param {String} resetPasswordLinkToken 
     * @param {module:api/CustomerAccountManagementV1Api~customerAccountManagementV1ValidateResetPasswordLinkTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.customerAccountManagementV1ValidateResetPasswordLinkTokenGet = function(customerId, resetPasswordLinkToken, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customerAccountManagementV1ValidateResetPasswordLinkTokenGet");
      }

      // verify the required parameter 'resetPasswordLinkToken' is set
      if (resetPasswordLinkToken === undefined || resetPasswordLinkToken === null) {
        throw new Error("Missing the required parameter 'resetPasswordLinkToken' when calling customerAccountManagementV1ValidateResetPasswordLinkTokenGet");
      }


      var pathParams = {
        'customerId': customerId,
        'resetPasswordLinkToken': resetPasswordLinkToken
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/V1/customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
