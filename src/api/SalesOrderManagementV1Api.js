/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body65', 'model/ErrorResponse', 'model/SalesDataOrderStatusHistorySearchResultInterface'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body65'), require('../model/ErrorResponse'), require('../model/SalesDataOrderStatusHistorySearchResultInterface'));
  } else {
    // Browser globals (root is window)
    if (!root.magento) {
      root.magento = {};
    }
    root.magento.SalesOrderManagementV1Api = factory(root.magento.ApiClient, root.magento.Body65, root.magento.ErrorResponse, root.magento.SalesDataOrderStatusHistorySearchResultInterface);
  }
}(this, function(ApiClient, Body65, ErrorResponse, SalesDataOrderStatusHistorySearchResultInterface) {
  'use strict';

  /**
   * SalesOrderManagementV1 service.
   * @module api/SalesOrderManagementV1Api
   * @version 2.0
   */

  /**
   * Constructs a new SalesOrderManagementV1Api. 
   * @alias module:api/SalesOrderManagementV1Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the salesOrderManagementV1AddCommentPost operation.
     * @callback module:api/SalesOrderManagementV1Api~salesOrderManagementV1AddCommentPostCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a comment to a specified order.
     * @param {Number} id The order ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body65} opts.body 
     * @param {module:api/SalesOrderManagementV1Api~salesOrderManagementV1AddCommentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.salesOrderManagementV1AddCommentPost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling salesOrderManagementV1AddCommentPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/V1/orders/{id}/comments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesOrderManagementV1CancelPost operation.
     * @callback module:api/SalesOrderManagementV1Api~salesOrderManagementV1CancelPostCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a specified order.
     * @param {Number} id The order ID.
     * @param {module:api/SalesOrderManagementV1Api~salesOrderManagementV1CancelPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.salesOrderManagementV1CancelPost = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling salesOrderManagementV1CancelPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/V1/orders/{id}/cancel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesOrderManagementV1GetCommentsListGet operation.
     * @callback module:api/SalesOrderManagementV1Api~salesOrderManagementV1GetCommentsListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SalesDataOrderStatusHistorySearchResultInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists comments for a specified order.
     * @param {Number} id The order ID.
     * @param {module:api/SalesOrderManagementV1Api~salesOrderManagementV1GetCommentsListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SalesDataOrderStatusHistorySearchResultInterface}
     */
    this.salesOrderManagementV1GetCommentsListGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling salesOrderManagementV1GetCommentsListGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = SalesDataOrderStatusHistorySearchResultInterface;

      return this.apiClient.callApi(
        '/V1/orders/{id}/comments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesOrderManagementV1GetStatusGet operation.
     * @callback module:api/SalesOrderManagementV1Api~salesOrderManagementV1GetStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the status for a specified order.
     * @param {Number} id The order ID.
     * @param {module:api/SalesOrderManagementV1Api~salesOrderManagementV1GetStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.salesOrderManagementV1GetStatusGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling salesOrderManagementV1GetStatusGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/V1/orders/{id}/statuses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesOrderManagementV1HoldPost operation.
     * @callback module:api/SalesOrderManagementV1Api~salesOrderManagementV1HoldPostCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Holds a specified order.
     * @param {Number} id The order ID.
     * @param {module:api/SalesOrderManagementV1Api~salesOrderManagementV1HoldPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.salesOrderManagementV1HoldPost = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling salesOrderManagementV1HoldPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/V1/orders/{id}/hold', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesOrderManagementV1NotifyPost operation.
     * @callback module:api/SalesOrderManagementV1Api~salesOrderManagementV1NotifyPostCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Emails a user a specified order.
     * @param {Number} id The order ID.
     * @param {module:api/SalesOrderManagementV1Api~salesOrderManagementV1NotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.salesOrderManagementV1NotifyPost = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling salesOrderManagementV1NotifyPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/V1/orders/{id}/emails', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesOrderManagementV1UnHoldPost operation.
     * @callback module:api/SalesOrderManagementV1Api~salesOrderManagementV1UnHoldPostCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Releases a specified order from hold status.
     * @param {Number} id The order ID.
     * @param {module:api/SalesOrderManagementV1Api~salesOrderManagementV1UnHoldPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.salesOrderManagementV1UnHoldPost = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling salesOrderManagementV1UnHoldPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/V1/orders/{id}/unhold', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
