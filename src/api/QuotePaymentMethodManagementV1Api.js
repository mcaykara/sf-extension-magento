/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body57', 'model/Body58', 'model/ErrorResponse', 'model/QuoteDataPaymentInterface', 'model/QuoteDataPaymentMethodInterface'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body57'), require('../model/Body58'), require('../model/ErrorResponse'), require('../model/QuoteDataPaymentInterface'), require('../model/QuoteDataPaymentMethodInterface'));
  } else {
    // Browser globals (root is window)
    if (!root.magento) {
      root.magento = {};
    }
    root.magento.QuotePaymentMethodManagementV1Api = factory(root.magento.ApiClient, root.magento.Body57, root.magento.Body58, root.magento.ErrorResponse, root.magento.QuoteDataPaymentInterface, root.magento.QuoteDataPaymentMethodInterface);
  }
}(this, function(ApiClient, Body57, Body58, ErrorResponse, QuoteDataPaymentInterface, QuoteDataPaymentMethodInterface) {
  'use strict';

  /**
   * QuotePaymentMethodManagementV1 service.
   * @module api/QuotePaymentMethodManagementV1Api
   * @version 2.0
   */

  /**
   * Constructs a new QuotePaymentMethodManagementV1Api. 
   * @alias module:api/QuotePaymentMethodManagementV1Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the quotePaymentMethodManagementV1GetGet operation.
     * @callback module:api/QuotePaymentMethodManagementV1Api~quotePaymentMethodManagementV1GetGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteDataPaymentInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the payment method for a specified shopping cart.
     * @param {Number} cartId The cart ID.
     * @param {module:api/QuotePaymentMethodManagementV1Api~quotePaymentMethodManagementV1GetGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteDataPaymentInterface}
     */
    this.quotePaymentMethodManagementV1GetGet = function(cartId, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling quotePaymentMethodManagementV1GetGet");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = QuoteDataPaymentInterface;

      return this.apiClient.callApi(
        '/V1/carts/{cartId}/selected-payment-method', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quotePaymentMethodManagementV1GetGet_0 operation.
     * @callback module:api/QuotePaymentMethodManagementV1Api~quotePaymentMethodManagementV1GetGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteDataPaymentInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the payment method for a specified shopping cart.
     * @param {module:api/QuotePaymentMethodManagementV1Api~quotePaymentMethodManagementV1GetGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteDataPaymentInterface}
     */
    this.quotePaymentMethodManagementV1GetGet_0 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = QuoteDataPaymentInterface;

      return this.apiClient.callApi(
        '/V1/carts/mine/selected-payment-method', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quotePaymentMethodManagementV1GetListGet operation.
     * @callback module:api/QuotePaymentMethodManagementV1Api~quotePaymentMethodManagementV1GetListGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuoteDataPaymentMethodInterface>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
     * @param {Number} cartId The cart ID.
     * @param {module:api/QuotePaymentMethodManagementV1Api~quotePaymentMethodManagementV1GetListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuoteDataPaymentMethodInterface>}
     */
    this.quotePaymentMethodManagementV1GetListGet = function(cartId, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling quotePaymentMethodManagementV1GetListGet");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [QuoteDataPaymentMethodInterface];

      return this.apiClient.callApi(
        '/V1/carts/{cartId}/payment-methods', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quotePaymentMethodManagementV1GetListGet_0 operation.
     * @callback module:api/QuotePaymentMethodManagementV1Api~quotePaymentMethodManagementV1GetListGet_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuoteDataPaymentMethodInterface>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
     * @param {module:api/QuotePaymentMethodManagementV1Api~quotePaymentMethodManagementV1GetListGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuoteDataPaymentMethodInterface>}
     */
    this.quotePaymentMethodManagementV1GetListGet_0 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [QuoteDataPaymentMethodInterface];

      return this.apiClient.callApi(
        '/V1/carts/mine/payment-methods', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quotePaymentMethodManagementV1SetPut operation.
     * @callback module:api/QuotePaymentMethodManagementV1Api~quotePaymentMethodManagementV1SetPutCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a specified payment method to a specified shopping cart.
     * @param {Number} cartId The cart ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body57} opts.body 
     * @param {module:api/QuotePaymentMethodManagementV1Api~quotePaymentMethodManagementV1SetPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.quotePaymentMethodManagementV1SetPut = function(cartId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling quotePaymentMethodManagementV1SetPut");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/V1/carts/{cartId}/selected-payment-method', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quotePaymentMethodManagementV1SetPut_0 operation.
     * @callback module:api/QuotePaymentMethodManagementV1Api~quotePaymentMethodManagementV1SetPut_0Callback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a specified payment method to a specified shopping cart.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body58} opts.body 
     * @param {module:api/QuotePaymentMethodManagementV1Api~quotePaymentMethodManagementV1SetPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.quotePaymentMethodManagementV1SetPut_0 = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/V1/carts/mine/selected-payment-method', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
