/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CatalogDataProductAttributeMediaGalleryEntryExtensionInterface', 'model/FrameworkDataImageContentInterface'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CatalogDataProductAttributeMediaGalleryEntryExtensionInterface'), require('./FrameworkDataImageContentInterface'));
  } else {
    // Browser globals (root is window)
    if (!root.magento) {
      root.magento = {};
    }
    root.magento.CatalogDataProductAttributeMediaGalleryEntryInterface = factory(root.magento.ApiClient, root.magento.CatalogDataProductAttributeMediaGalleryEntryExtensionInterface, root.magento.FrameworkDataImageContentInterface);
  }
}(this, function(ApiClient, CatalogDataProductAttributeMediaGalleryEntryExtensionInterface, FrameworkDataImageContentInterface) {
  'use strict';




  /**
   * The CatalogDataProductAttributeMediaGalleryEntryInterface model module.
   * @module model/CatalogDataProductAttributeMediaGalleryEntryInterface
   * @version 2.0
   */

  /**
   * Constructs a new <code>CatalogDataProductAttributeMediaGalleryEntryInterface</code>.
   * 
   * @alias module:model/CatalogDataProductAttributeMediaGalleryEntryInterface
   * @class
   * @param mediaType {String} Media type
   * @param label {String} Gallery entry alternative text
   * @param position {Number} Gallery entry position (sort order)
   * @param disabled {Boolean} If gallery entry is hidden from product page
   * @param types {Array.<String>} Gallery entry image types (thumbnail, image, small_image etc)
   */
  var exports = function(mediaType, label, position, disabled, types) {
    var _this = this;


    _this['mediaType'] = mediaType;
    _this['label'] = label;
    _this['position'] = position;
    _this['disabled'] = disabled;
    _this['types'] = types;



  };

  /**
   * Constructs a <code>CatalogDataProductAttributeMediaGalleryEntryInterface</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CatalogDataProductAttributeMediaGalleryEntryInterface} obj Optional instance to populate.
   * @return {module:model/CatalogDataProductAttributeMediaGalleryEntryInterface} The populated <code>CatalogDataProductAttributeMediaGalleryEntryInterface</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('mediaType')) {
        obj['mediaType'] = ApiClient.convertToType(data['mediaType'], 'String');
      }
      if (data.hasOwnProperty('label')) {
        obj['label'] = ApiClient.convertToType(data['label'], 'String');
      }
      if (data.hasOwnProperty('position')) {
        obj['position'] = ApiClient.convertToType(data['position'], 'Number');
      }
      if (data.hasOwnProperty('disabled')) {
        obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
      }
      if (data.hasOwnProperty('types')) {
        obj['types'] = ApiClient.convertToType(data['types'], ['String']);
      }
      if (data.hasOwnProperty('file')) {
        obj['file'] = ApiClient.convertToType(data['file'], 'String');
      }
      if (data.hasOwnProperty('content')) {
        obj['content'] = FrameworkDataImageContentInterface.constructFromObject(data['content']);
      }
      if (data.hasOwnProperty('extensionAttributes')) {
        obj['extensionAttributes'] = CatalogDataProductAttributeMediaGalleryEntryExtensionInterface.constructFromObject(data['extensionAttributes']);
      }
    }
    return obj;
  }

  /**
   * Gallery entry ID
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Media type
   * @member {String} mediaType
   */
  exports.prototype['mediaType'] = undefined;
  /**
   * Gallery entry alternative text
   * @member {String} label
   */
  exports.prototype['label'] = undefined;
  /**
   * Gallery entry position (sort order)
   * @member {Number} position
   */
  exports.prototype['position'] = undefined;
  /**
   * If gallery entry is hidden from product page
   * @member {Boolean} disabled
   */
  exports.prototype['disabled'] = undefined;
  /**
   * Gallery entry image types (thumbnail, image, small_image etc)
   * @member {Array.<String>} types
   */
  exports.prototype['types'] = undefined;
  /**
   * File path
   * @member {String} file
   */
  exports.prototype['file'] = undefined;
  /**
   * @member {module:model/FrameworkDataImageContentInterface} content
   */
  exports.prototype['content'] = undefined;
  /**
   * @member {module:model/CatalogDataProductAttributeMediaGalleryEntryExtensionInterface} extensionAttributes
   */
  exports.prototype['extensionAttributes'] = undefined;



  return exports;
}));


