/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CatalogInventoryDataStockItemExtensionInterface'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CatalogInventoryDataStockItemExtensionInterface'));
  } else {
    // Browser globals (root is window)
    if (!root.magento) {
      root.magento = {};
    }
    root.magento.CatalogInventoryDataStockItemInterface = factory(root.magento.ApiClient, root.magento.CatalogInventoryDataStockItemExtensionInterface);
  }
}(this, function(ApiClient, CatalogInventoryDataStockItemExtensionInterface) {
  'use strict';




  /**
   * The CatalogInventoryDataStockItemInterface model module.
   * @module model/CatalogInventoryDataStockItemInterface
   * @version 2.0
   */

  /**
   * Constructs a new <code>CatalogInventoryDataStockItemInterface</code>.
   * Interface StockItem
   * @alias module:model/CatalogInventoryDataStockItemInterface
   * @class
   * @param qty {Number} 
   * @param isInStock {Boolean} Stock Availability
   * @param isQtyDecimal {Boolean} 
   * @param showDefaultNotificationMessage {Boolean} 
   * @param useConfigMinQty {Boolean} 
   * @param minQty {Number} Minimal quantity available for item status in stock
   * @param useConfigMinSaleQty {Number} 
   * @param minSaleQty {Number} Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation
   * @param useConfigMaxSaleQty {Boolean} 
   * @param maxSaleQty {Number} Maximum Qty Allowed in Shopping Cart data wrapper
   * @param useConfigBackorders {Boolean} 
   * @param backorders {Number} Backorders status
   * @param useConfigNotifyStockQty {Boolean} 
   * @param notifyStockQty {Number} Notify for Quantity Below data wrapper
   * @param useConfigQtyIncrements {Boolean} 
   * @param qtyIncrements {Number} Quantity Increments data wrapper
   * @param useConfigEnableQtyInc {Boolean} 
   * @param enableQtyIncrements {Boolean} Whether Quantity Increments is enabled
   * @param useConfigManageStock {Boolean} 
   * @param manageStock {Boolean} Can Manage Stock
   * @param lowStockDate {String} 
   * @param isDecimalDivided {Boolean} 
   * @param stockStatusChangedAuto {Number} 
   */
  var exports = function(qty, isInStock, isQtyDecimal, showDefaultNotificationMessage, useConfigMinQty, minQty, useConfigMinSaleQty, minSaleQty, useConfigMaxSaleQty, maxSaleQty, useConfigBackorders, backorders, useConfigNotifyStockQty, notifyStockQty, useConfigQtyIncrements, qtyIncrements, useConfigEnableQtyInc, enableQtyIncrements, useConfigManageStock, manageStock, lowStockDate, isDecimalDivided, stockStatusChangedAuto) {
    var _this = this;




    _this['qty'] = qty;
    _this['isInStock'] = isInStock;
    _this['isQtyDecimal'] = isQtyDecimal;
    _this['showDefaultNotificationMessage'] = showDefaultNotificationMessage;
    _this['useConfigMinQty'] = useConfigMinQty;
    _this['minQty'] = minQty;
    _this['useConfigMinSaleQty'] = useConfigMinSaleQty;
    _this['minSaleQty'] = minSaleQty;
    _this['useConfigMaxSaleQty'] = useConfigMaxSaleQty;
    _this['maxSaleQty'] = maxSaleQty;
    _this['useConfigBackorders'] = useConfigBackorders;
    _this['backorders'] = backorders;
    _this['useConfigNotifyStockQty'] = useConfigNotifyStockQty;
    _this['notifyStockQty'] = notifyStockQty;
    _this['useConfigQtyIncrements'] = useConfigQtyIncrements;
    _this['qtyIncrements'] = qtyIncrements;
    _this['useConfigEnableQtyInc'] = useConfigEnableQtyInc;
    _this['enableQtyIncrements'] = enableQtyIncrements;
    _this['useConfigManageStock'] = useConfigManageStock;
    _this['manageStock'] = manageStock;
    _this['lowStockDate'] = lowStockDate;
    _this['isDecimalDivided'] = isDecimalDivided;
    _this['stockStatusChangedAuto'] = stockStatusChangedAuto;

  };

  /**
   * Constructs a <code>CatalogInventoryDataStockItemInterface</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CatalogInventoryDataStockItemInterface} obj Optional instance to populate.
   * @return {module:model/CatalogInventoryDataStockItemInterface} The populated <code>CatalogInventoryDataStockItemInterface</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('itemId')) {
        obj['itemId'] = ApiClient.convertToType(data['itemId'], 'Number');
      }
      if (data.hasOwnProperty('productId')) {
        obj['productId'] = ApiClient.convertToType(data['productId'], 'Number');
      }
      if (data.hasOwnProperty('stockId')) {
        obj['stockId'] = ApiClient.convertToType(data['stockId'], 'Number');
      }
      if (data.hasOwnProperty('qty')) {
        obj['qty'] = ApiClient.convertToType(data['qty'], 'Number');
      }
      if (data.hasOwnProperty('isInStock')) {
        obj['isInStock'] = ApiClient.convertToType(data['isInStock'], 'Boolean');
      }
      if (data.hasOwnProperty('isQtyDecimal')) {
        obj['isQtyDecimal'] = ApiClient.convertToType(data['isQtyDecimal'], 'Boolean');
      }
      if (data.hasOwnProperty('showDefaultNotificationMessage')) {
        obj['showDefaultNotificationMessage'] = ApiClient.convertToType(data['showDefaultNotificationMessage'], 'Boolean');
      }
      if (data.hasOwnProperty('useConfigMinQty')) {
        obj['useConfigMinQty'] = ApiClient.convertToType(data['useConfigMinQty'], 'Boolean');
      }
      if (data.hasOwnProperty('minQty')) {
        obj['minQty'] = ApiClient.convertToType(data['minQty'], 'Number');
      }
      if (data.hasOwnProperty('useConfigMinSaleQty')) {
        obj['useConfigMinSaleQty'] = ApiClient.convertToType(data['useConfigMinSaleQty'], 'Number');
      }
      if (data.hasOwnProperty('minSaleQty')) {
        obj['minSaleQty'] = ApiClient.convertToType(data['minSaleQty'], 'Number');
      }
      if (data.hasOwnProperty('useConfigMaxSaleQty')) {
        obj['useConfigMaxSaleQty'] = ApiClient.convertToType(data['useConfigMaxSaleQty'], 'Boolean');
      }
      if (data.hasOwnProperty('maxSaleQty')) {
        obj['maxSaleQty'] = ApiClient.convertToType(data['maxSaleQty'], 'Number');
      }
      if (data.hasOwnProperty('useConfigBackorders')) {
        obj['useConfigBackorders'] = ApiClient.convertToType(data['useConfigBackorders'], 'Boolean');
      }
      if (data.hasOwnProperty('backorders')) {
        obj['backorders'] = ApiClient.convertToType(data['backorders'], 'Number');
      }
      if (data.hasOwnProperty('useConfigNotifyStockQty')) {
        obj['useConfigNotifyStockQty'] = ApiClient.convertToType(data['useConfigNotifyStockQty'], 'Boolean');
      }
      if (data.hasOwnProperty('notifyStockQty')) {
        obj['notifyStockQty'] = ApiClient.convertToType(data['notifyStockQty'], 'Number');
      }
      if (data.hasOwnProperty('useConfigQtyIncrements')) {
        obj['useConfigQtyIncrements'] = ApiClient.convertToType(data['useConfigQtyIncrements'], 'Boolean');
      }
      if (data.hasOwnProperty('qtyIncrements')) {
        obj['qtyIncrements'] = ApiClient.convertToType(data['qtyIncrements'], 'Number');
      }
      if (data.hasOwnProperty('useConfigEnableQtyInc')) {
        obj['useConfigEnableQtyInc'] = ApiClient.convertToType(data['useConfigEnableQtyInc'], 'Boolean');
      }
      if (data.hasOwnProperty('enableQtyIncrements')) {
        obj['enableQtyIncrements'] = ApiClient.convertToType(data['enableQtyIncrements'], 'Boolean');
      }
      if (data.hasOwnProperty('useConfigManageStock')) {
        obj['useConfigManageStock'] = ApiClient.convertToType(data['useConfigManageStock'], 'Boolean');
      }
      if (data.hasOwnProperty('manageStock')) {
        obj['manageStock'] = ApiClient.convertToType(data['manageStock'], 'Boolean');
      }
      if (data.hasOwnProperty('lowStockDate')) {
        obj['lowStockDate'] = ApiClient.convertToType(data['lowStockDate'], 'String');
      }
      if (data.hasOwnProperty('isDecimalDivided')) {
        obj['isDecimalDivided'] = ApiClient.convertToType(data['isDecimalDivided'], 'Boolean');
      }
      if (data.hasOwnProperty('stockStatusChangedAuto')) {
        obj['stockStatusChangedAuto'] = ApiClient.convertToType(data['stockStatusChangedAuto'], 'Number');
      }
      if (data.hasOwnProperty('extensionAttributes')) {
        obj['extensionAttributes'] = CatalogInventoryDataStockItemExtensionInterface.constructFromObject(data['extensionAttributes']);
      }
    }
    return obj;
  }

  /**
   * @member {Number} itemId
   */
  exports.prototype['itemId'] = undefined;
  /**
   * @member {Number} productId
   */
  exports.prototype['productId'] = undefined;
  /**
   * Stock identifier
   * @member {Number} stockId
   */
  exports.prototype['stockId'] = undefined;
  /**
   * @member {Number} qty
   */
  exports.prototype['qty'] = undefined;
  /**
   * Stock Availability
   * @member {Boolean} isInStock
   */
  exports.prototype['isInStock'] = undefined;
  /**
   * @member {Boolean} isQtyDecimal
   */
  exports.prototype['isQtyDecimal'] = undefined;
  /**
   * @member {Boolean} showDefaultNotificationMessage
   */
  exports.prototype['showDefaultNotificationMessage'] = undefined;
  /**
   * @member {Boolean} useConfigMinQty
   */
  exports.prototype['useConfigMinQty'] = undefined;
  /**
   * Minimal quantity available for item status in stock
   * @member {Number} minQty
   */
  exports.prototype['minQty'] = undefined;
  /**
   * @member {Number} useConfigMinSaleQty
   */
  exports.prototype['useConfigMinSaleQty'] = undefined;
  /**
   * Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation
   * @member {Number} minSaleQty
   */
  exports.prototype['minSaleQty'] = undefined;
  /**
   * @member {Boolean} useConfigMaxSaleQty
   */
  exports.prototype['useConfigMaxSaleQty'] = undefined;
  /**
   * Maximum Qty Allowed in Shopping Cart data wrapper
   * @member {Number} maxSaleQty
   */
  exports.prototype['maxSaleQty'] = undefined;
  /**
   * @member {Boolean} useConfigBackorders
   */
  exports.prototype['useConfigBackorders'] = undefined;
  /**
   * Backorders status
   * @member {Number} backorders
   */
  exports.prototype['backorders'] = undefined;
  /**
   * @member {Boolean} useConfigNotifyStockQty
   */
  exports.prototype['useConfigNotifyStockQty'] = undefined;
  /**
   * Notify for Quantity Below data wrapper
   * @member {Number} notifyStockQty
   */
  exports.prototype['notifyStockQty'] = undefined;
  /**
   * @member {Boolean} useConfigQtyIncrements
   */
  exports.prototype['useConfigQtyIncrements'] = undefined;
  /**
   * Quantity Increments data wrapper
   * @member {Number} qtyIncrements
   */
  exports.prototype['qtyIncrements'] = undefined;
  /**
   * @member {Boolean} useConfigEnableQtyInc
   */
  exports.prototype['useConfigEnableQtyInc'] = undefined;
  /**
   * Whether Quantity Increments is enabled
   * @member {Boolean} enableQtyIncrements
   */
  exports.prototype['enableQtyIncrements'] = undefined;
  /**
   * @member {Boolean} useConfigManageStock
   */
  exports.prototype['useConfigManageStock'] = undefined;
  /**
   * Can Manage Stock
   * @member {Boolean} manageStock
   */
  exports.prototype['manageStock'] = undefined;
  /**
   * @member {String} lowStockDate
   */
  exports.prototype['lowStockDate'] = undefined;
  /**
   * @member {Boolean} isDecimalDivided
   */
  exports.prototype['isDecimalDivided'] = undefined;
  /**
   * @member {Number} stockStatusChangedAuto
   */
  exports.prototype['stockStatusChangedAuto'] = undefined;
  /**
   * @member {module:model/CatalogInventoryDataStockItemExtensionInterface} extensionAttributes
   */
  exports.prototype['extensionAttributes'] = undefined;



  return exports;
}));


