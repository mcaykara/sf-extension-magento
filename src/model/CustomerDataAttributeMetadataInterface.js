/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CustomerDataOptionInterface', 'model/CustomerDataValidationRuleInterface'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CustomerDataOptionInterface'), require('./CustomerDataValidationRuleInterface'));
  } else {
    // Browser globals (root is window)
    if (!root.magento) {
      root.magento = {};
    }
    root.magento.CustomerDataAttributeMetadataInterface = factory(root.magento.ApiClient, root.magento.CustomerDataOptionInterface, root.magento.CustomerDataValidationRuleInterface);
  }
}(this, function(ApiClient, CustomerDataOptionInterface, CustomerDataValidationRuleInterface) {
  'use strict';




  /**
   * The CustomerDataAttributeMetadataInterface model module.
   * @module model/CustomerDataAttributeMetadataInterface
   * @version 2.0
   */

  /**
   * Constructs a new <code>CustomerDataAttributeMetadataInterface</code>.
   * Customer attribute metadata interface.
   * @alias module:model/CustomerDataAttributeMetadataInterface
   * @class
   * @param frontendInput {String} HTML for input element.
   * @param inputFilter {String} Template used for input (e.g. \"date\")
   * @param storeLabel {String} Label of the store.
   * @param validationRules {Array.<module:model/CustomerDataValidationRuleInterface>} Validation rules.
   * @param multilineCount {Number} Of lines of the attribute value.
   * @param visible {Boolean} Attribute is visible on frontend.
   * @param required {Boolean} Attribute is required.
   * @param dataModel {String} Data model for attribute.
   * @param options {Array.<module:model/CustomerDataOptionInterface>} Options of the attribute (key => value pairs for select)
   * @param frontendClass {String} Class which is used to display the attribute on frontend.
   * @param userDefined {Boolean} Current attribute has been defined by a user.
   * @param sortOrder {Number} Attributes sort order.
   * @param frontendLabel {String} Label which supposed to be displayed on frontend.
   * @param note {String} The note attribute for the element.
   * @param system {Boolean} This is a system attribute.
   * @param backendType {String} Backend type.
   * @param attributeCode {String} Code of the attribute.
   */
  var exports = function(frontendInput, inputFilter, storeLabel, validationRules, multilineCount, visible, required, dataModel, options, frontendClass, userDefined, sortOrder, frontendLabel, note, system, backendType, attributeCode) {
    var _this = this;

    _this['frontendInput'] = frontendInput;
    _this['inputFilter'] = inputFilter;
    _this['storeLabel'] = storeLabel;
    _this['validationRules'] = validationRules;
    _this['multilineCount'] = multilineCount;
    _this['visible'] = visible;
    _this['required'] = required;
    _this['dataModel'] = dataModel;
    _this['options'] = options;
    _this['frontendClass'] = frontendClass;
    _this['userDefined'] = userDefined;
    _this['sortOrder'] = sortOrder;
    _this['frontendLabel'] = frontendLabel;
    _this['note'] = note;
    _this['system'] = system;
    _this['backendType'] = backendType;




    _this['attributeCode'] = attributeCode;
  };

  /**
   * Constructs a <code>CustomerDataAttributeMetadataInterface</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CustomerDataAttributeMetadataInterface} obj Optional instance to populate.
   * @return {module:model/CustomerDataAttributeMetadataInterface} The populated <code>CustomerDataAttributeMetadataInterface</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('frontendInput')) {
        obj['frontendInput'] = ApiClient.convertToType(data['frontendInput'], 'String');
      }
      if (data.hasOwnProperty('inputFilter')) {
        obj['inputFilter'] = ApiClient.convertToType(data['inputFilter'], 'String');
      }
      if (data.hasOwnProperty('storeLabel')) {
        obj['storeLabel'] = ApiClient.convertToType(data['storeLabel'], 'String');
      }
      if (data.hasOwnProperty('validationRules')) {
        obj['validationRules'] = ApiClient.convertToType(data['validationRules'], [CustomerDataValidationRuleInterface]);
      }
      if (data.hasOwnProperty('multilineCount')) {
        obj['multilineCount'] = ApiClient.convertToType(data['multilineCount'], 'Number');
      }
      if (data.hasOwnProperty('visible')) {
        obj['visible'] = ApiClient.convertToType(data['visible'], 'Boolean');
      }
      if (data.hasOwnProperty('required')) {
        obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
      }
      if (data.hasOwnProperty('dataModel')) {
        obj['dataModel'] = ApiClient.convertToType(data['dataModel'], 'String');
      }
      if (data.hasOwnProperty('options')) {
        obj['options'] = ApiClient.convertToType(data['options'], [CustomerDataOptionInterface]);
      }
      if (data.hasOwnProperty('frontendClass')) {
        obj['frontendClass'] = ApiClient.convertToType(data['frontendClass'], 'String');
      }
      if (data.hasOwnProperty('userDefined')) {
        obj['userDefined'] = ApiClient.convertToType(data['userDefined'], 'Boolean');
      }
      if (data.hasOwnProperty('sortOrder')) {
        obj['sortOrder'] = ApiClient.convertToType(data['sortOrder'], 'Number');
      }
      if (data.hasOwnProperty('frontendLabel')) {
        obj['frontendLabel'] = ApiClient.convertToType(data['frontendLabel'], 'String');
      }
      if (data.hasOwnProperty('note')) {
        obj['note'] = ApiClient.convertToType(data['note'], 'String');
      }
      if (data.hasOwnProperty('system')) {
        obj['system'] = ApiClient.convertToType(data['system'], 'Boolean');
      }
      if (data.hasOwnProperty('backendType')) {
        obj['backendType'] = ApiClient.convertToType(data['backendType'], 'String');
      }
      if (data.hasOwnProperty('isUsedInGrid')) {
        obj['isUsedInGrid'] = ApiClient.convertToType(data['isUsedInGrid'], 'Boolean');
      }
      if (data.hasOwnProperty('isVisibleInGrid')) {
        obj['isVisibleInGrid'] = ApiClient.convertToType(data['isVisibleInGrid'], 'Boolean');
      }
      if (data.hasOwnProperty('isFilterableInGrid')) {
        obj['isFilterableInGrid'] = ApiClient.convertToType(data['isFilterableInGrid'], 'Boolean');
      }
      if (data.hasOwnProperty('isSearchableInGrid')) {
        obj['isSearchableInGrid'] = ApiClient.convertToType(data['isSearchableInGrid'], 'Boolean');
      }
      if (data.hasOwnProperty('attributeCode')) {
        obj['attributeCode'] = ApiClient.convertToType(data['attributeCode'], 'String');
      }
    }
    return obj;
  }

  /**
   * HTML for input element.
   * @member {String} frontendInput
   */
  exports.prototype['frontendInput'] = undefined;
  /**
   * Template used for input (e.g. \"date\")
   * @member {String} inputFilter
   */
  exports.prototype['inputFilter'] = undefined;
  /**
   * Label of the store.
   * @member {String} storeLabel
   */
  exports.prototype['storeLabel'] = undefined;
  /**
   * Validation rules.
   * @member {Array.<module:model/CustomerDataValidationRuleInterface>} validationRules
   */
  exports.prototype['validationRules'] = undefined;
  /**
   * Of lines of the attribute value.
   * @member {Number} multilineCount
   */
  exports.prototype['multilineCount'] = undefined;
  /**
   * Attribute is visible on frontend.
   * @member {Boolean} visible
   */
  exports.prototype['visible'] = undefined;
  /**
   * Attribute is required.
   * @member {Boolean} required
   */
  exports.prototype['required'] = undefined;
  /**
   * Data model for attribute.
   * @member {String} dataModel
   */
  exports.prototype['dataModel'] = undefined;
  /**
   * Options of the attribute (key => value pairs for select)
   * @member {Array.<module:model/CustomerDataOptionInterface>} options
   */
  exports.prototype['options'] = undefined;
  /**
   * Class which is used to display the attribute on frontend.
   * @member {String} frontendClass
   */
  exports.prototype['frontendClass'] = undefined;
  /**
   * Current attribute has been defined by a user.
   * @member {Boolean} userDefined
   */
  exports.prototype['userDefined'] = undefined;
  /**
   * Attributes sort order.
   * @member {Number} sortOrder
   */
  exports.prototype['sortOrder'] = undefined;
  /**
   * Label which supposed to be displayed on frontend.
   * @member {String} frontendLabel
   */
  exports.prototype['frontendLabel'] = undefined;
  /**
   * The note attribute for the element.
   * @member {String} note
   */
  exports.prototype['note'] = undefined;
  /**
   * This is a system attribute.
   * @member {Boolean} system
   */
  exports.prototype['system'] = undefined;
  /**
   * Backend type.
   * @member {String} backendType
   */
  exports.prototype['backendType'] = undefined;
  /**
   * It is used in customer grid
   * @member {Boolean} isUsedInGrid
   */
  exports.prototype['isUsedInGrid'] = undefined;
  /**
   * It is visible in customer grid
   * @member {Boolean} isVisibleInGrid
   */
  exports.prototype['isVisibleInGrid'] = undefined;
  /**
   * It is filterable in customer grid
   * @member {Boolean} isFilterableInGrid
   */
  exports.prototype['isFilterableInGrid'] = undefined;
  /**
   * It is searchable in customer grid
   * @member {Boolean} isSearchableInGrid
   */
  exports.prototype['isSearchableInGrid'] = undefined;
  /**
   * Code of the attribute.
   * @member {String} attributeCode
   */
  exports.prototype['attributeCode'] = undefined;



  return exports;
}));


