/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.magento) {
      root.magento = {};
    }
    root.magento.FrameworkDataVideoContentInterface = factory(root.magento.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The FrameworkDataVideoContentInterface model module.
   * @module model/FrameworkDataVideoContentInterface
   * @version 2.0
   */

  /**
   * Constructs a new <code>FrameworkDataVideoContentInterface</code>.
   * Video Content data interface
   * @alias module:model/FrameworkDataVideoContentInterface
   * @class
   * @param mediaType {String} MIME type
   * @param videoProvider {String} Provider
   * @param videoUrl {String} Video URL
   * @param videoTitle {String} Title
   * @param videoDescription {String} Video Description
   * @param videoMetadata {String} Metadata
   */
  var exports = function(mediaType, videoProvider, videoUrl, videoTitle, videoDescription, videoMetadata) {
    var _this = this;

    _this['mediaType'] = mediaType;
    _this['videoProvider'] = videoProvider;
    _this['videoUrl'] = videoUrl;
    _this['videoTitle'] = videoTitle;
    _this['videoDescription'] = videoDescription;
    _this['videoMetadata'] = videoMetadata;
  };

  /**
   * Constructs a <code>FrameworkDataVideoContentInterface</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FrameworkDataVideoContentInterface} obj Optional instance to populate.
   * @return {module:model/FrameworkDataVideoContentInterface} The populated <code>FrameworkDataVideoContentInterface</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('mediaType')) {
        obj['mediaType'] = ApiClient.convertToType(data['mediaType'], 'String');
      }
      if (data.hasOwnProperty('videoProvider')) {
        obj['videoProvider'] = ApiClient.convertToType(data['videoProvider'], 'String');
      }
      if (data.hasOwnProperty('videoUrl')) {
        obj['videoUrl'] = ApiClient.convertToType(data['videoUrl'], 'String');
      }
      if (data.hasOwnProperty('videoTitle')) {
        obj['videoTitle'] = ApiClient.convertToType(data['videoTitle'], 'String');
      }
      if (data.hasOwnProperty('videoDescription')) {
        obj['videoDescription'] = ApiClient.convertToType(data['videoDescription'], 'String');
      }
      if (data.hasOwnProperty('videoMetadata')) {
        obj['videoMetadata'] = ApiClient.convertToType(data['videoMetadata'], 'String');
      }
    }
    return obj;
  }

  /**
   * MIME type
   * @member {String} mediaType
   */
  exports.prototype['mediaType'] = undefined;
  /**
   * Provider
   * @member {String} videoProvider
   */
  exports.prototype['videoProvider'] = undefined;
  /**
   * Video URL
   * @member {String} videoUrl
   */
  exports.prototype['videoUrl'] = undefined;
  /**
   * Title
   * @member {String} videoTitle
   */
  exports.prototype['videoTitle'] = undefined;
  /**
   * Video Description
   * @member {String} videoDescription
   */
  exports.prototype['videoDescription'] = undefined;
  /**
   * Metadata
   * @member {String} videoMetadata
   */
  exports.prototype['videoMetadata'] = undefined;



  return exports;
}));


