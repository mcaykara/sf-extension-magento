/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DirectoryDataCountryInformationExtensionInterface', 'model/DirectoryDataRegionInformationInterface'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./DirectoryDataCountryInformationExtensionInterface'), require('./DirectoryDataRegionInformationInterface'));
  } else {
    // Browser globals (root is window)
    if (!root.magento) {
      root.magento = {};
    }
    root.magento.DirectoryDataCountryInformationInterface = factory(root.magento.ApiClient, root.magento.DirectoryDataCountryInformationExtensionInterface, root.magento.DirectoryDataRegionInformationInterface);
  }
}(this, function(ApiClient, DirectoryDataCountryInformationExtensionInterface, DirectoryDataRegionInformationInterface) {
  'use strict';




  /**
   * The DirectoryDataCountryInformationInterface model module.
   * @module model/DirectoryDataCountryInformationInterface
   * @version 2.0
   */

  /**
   * Constructs a new <code>DirectoryDataCountryInformationInterface</code>.
   * Country Information interface.
   * @alias module:model/DirectoryDataCountryInformationInterface
   * @class
   * @param id {String} The country id for the store.
   * @param twoLetterAbbreviation {String} The country 2 letter abbreviation for the store.
   * @param threeLetterAbbreviation {String} The country 3 letter abbreviation for the store.
   * @param fullNameLocale {String} The country full name (in store locale) for the store.
   * @param fullNameEnglish {String} The country full name (in English) for the store.
   */
  var exports = function(id, twoLetterAbbreviation, threeLetterAbbreviation, fullNameLocale, fullNameEnglish) {
    var _this = this;

    _this['id'] = id;
    _this['twoLetterAbbreviation'] = twoLetterAbbreviation;
    _this['threeLetterAbbreviation'] = threeLetterAbbreviation;
    _this['fullNameLocale'] = fullNameLocale;
    _this['fullNameEnglish'] = fullNameEnglish;


  };

  /**
   * Constructs a <code>DirectoryDataCountryInformationInterface</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DirectoryDataCountryInformationInterface} obj Optional instance to populate.
   * @return {module:model/DirectoryDataCountryInformationInterface} The populated <code>DirectoryDataCountryInformationInterface</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('twoLetterAbbreviation')) {
        obj['twoLetterAbbreviation'] = ApiClient.convertToType(data['twoLetterAbbreviation'], 'String');
      }
      if (data.hasOwnProperty('threeLetterAbbreviation')) {
        obj['threeLetterAbbreviation'] = ApiClient.convertToType(data['threeLetterAbbreviation'], 'String');
      }
      if (data.hasOwnProperty('fullNameLocale')) {
        obj['fullNameLocale'] = ApiClient.convertToType(data['fullNameLocale'], 'String');
      }
      if (data.hasOwnProperty('fullNameEnglish')) {
        obj['fullNameEnglish'] = ApiClient.convertToType(data['fullNameEnglish'], 'String');
      }
      if (data.hasOwnProperty('availableRegions')) {
        obj['availableRegions'] = ApiClient.convertToType(data['availableRegions'], [DirectoryDataRegionInformationInterface]);
      }
      if (data.hasOwnProperty('extensionAttributes')) {
        obj['extensionAttributes'] = DirectoryDataCountryInformationExtensionInterface.constructFromObject(data['extensionAttributes']);
      }
    }
    return obj;
  }

  /**
   * The country id for the store.
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The country 2 letter abbreviation for the store.
   * @member {String} twoLetterAbbreviation
   */
  exports.prototype['twoLetterAbbreviation'] = undefined;
  /**
   * The country 3 letter abbreviation for the store.
   * @member {String} threeLetterAbbreviation
   */
  exports.prototype['threeLetterAbbreviation'] = undefined;
  /**
   * The country full name (in store locale) for the store.
   * @member {String} fullNameLocale
   */
  exports.prototype['fullNameLocale'] = undefined;
  /**
   * The country full name (in English) for the store.
   * @member {String} fullNameEnglish
   */
  exports.prototype['fullNameEnglish'] = undefined;
  /**
   * The available regions for the store.
   * @member {Array.<module:model/DirectoryDataRegionInformationInterface>} availableRegions
   */
  exports.prototype['availableRegions'] = undefined;
  /**
   * @member {module:model/DirectoryDataCountryInformationExtensionInterface} extensionAttributes
   */
  exports.prototype['extensionAttributes'] = undefined;



  return exports;
}));


