/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DirectoryDataCurrencyInformationExtensionInterface', 'model/DirectoryDataExchangeRateInterface'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./DirectoryDataCurrencyInformationExtensionInterface'), require('./DirectoryDataExchangeRateInterface'));
  } else {
    // Browser globals (root is window)
    if (!root.magento) {
      root.magento = {};
    }
    root.magento.DirectoryDataCurrencyInformationInterface = factory(root.magento.ApiClient, root.magento.DirectoryDataCurrencyInformationExtensionInterface, root.magento.DirectoryDataExchangeRateInterface);
  }
}(this, function(ApiClient, DirectoryDataCurrencyInformationExtensionInterface, DirectoryDataExchangeRateInterface) {
  'use strict';




  /**
   * The DirectoryDataCurrencyInformationInterface model module.
   * @module model/DirectoryDataCurrencyInformationInterface
   * @version 2.0
   */

  /**
   * Constructs a new <code>DirectoryDataCurrencyInformationInterface</code>.
   * Currency Information interface.
   * @alias module:model/DirectoryDataCurrencyInformationInterface
   * @class
   * @param baseCurrencyCode {String} The base currency code for the store.
   * @param baseCurrencySymbol {String} The currency symbol of the base currency for the store.
   * @param defaultDisplayCurrencyCode {String} The default display currency code for the store.
   * @param defaultDisplayCurrencySymbol {String} The currency symbol of the default display currency for the store.
   * @param availableCurrencyCodes {Array.<String>} The list of allowed currency codes for the store.
   * @param exchangeRates {Array.<module:model/DirectoryDataExchangeRateInterface>} The list of exchange rate information for the store.
   */
  var exports = function(baseCurrencyCode, baseCurrencySymbol, defaultDisplayCurrencyCode, defaultDisplayCurrencySymbol, availableCurrencyCodes, exchangeRates) {
    var _this = this;

    _this['baseCurrencyCode'] = baseCurrencyCode;
    _this['baseCurrencySymbol'] = baseCurrencySymbol;
    _this['defaultDisplayCurrencyCode'] = defaultDisplayCurrencyCode;
    _this['defaultDisplayCurrencySymbol'] = defaultDisplayCurrencySymbol;
    _this['availableCurrencyCodes'] = availableCurrencyCodes;
    _this['exchangeRates'] = exchangeRates;

  };

  /**
   * Constructs a <code>DirectoryDataCurrencyInformationInterface</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DirectoryDataCurrencyInformationInterface} obj Optional instance to populate.
   * @return {module:model/DirectoryDataCurrencyInformationInterface} The populated <code>DirectoryDataCurrencyInformationInterface</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('baseCurrencyCode')) {
        obj['baseCurrencyCode'] = ApiClient.convertToType(data['baseCurrencyCode'], 'String');
      }
      if (data.hasOwnProperty('baseCurrencySymbol')) {
        obj['baseCurrencySymbol'] = ApiClient.convertToType(data['baseCurrencySymbol'], 'String');
      }
      if (data.hasOwnProperty('defaultDisplayCurrencyCode')) {
        obj['defaultDisplayCurrencyCode'] = ApiClient.convertToType(data['defaultDisplayCurrencyCode'], 'String');
      }
      if (data.hasOwnProperty('defaultDisplayCurrencySymbol')) {
        obj['defaultDisplayCurrencySymbol'] = ApiClient.convertToType(data['defaultDisplayCurrencySymbol'], 'String');
      }
      if (data.hasOwnProperty('availableCurrencyCodes')) {
        obj['availableCurrencyCodes'] = ApiClient.convertToType(data['availableCurrencyCodes'], ['String']);
      }
      if (data.hasOwnProperty('exchangeRates')) {
        obj['exchangeRates'] = ApiClient.convertToType(data['exchangeRates'], [DirectoryDataExchangeRateInterface]);
      }
      if (data.hasOwnProperty('extensionAttributes')) {
        obj['extensionAttributes'] = DirectoryDataCurrencyInformationExtensionInterface.constructFromObject(data['extensionAttributes']);
      }
    }
    return obj;
  }

  /**
   * The base currency code for the store.
   * @member {String} baseCurrencyCode
   */
  exports.prototype['baseCurrencyCode'] = undefined;
  /**
   * The currency symbol of the base currency for the store.
   * @member {String} baseCurrencySymbol
   */
  exports.prototype['baseCurrencySymbol'] = undefined;
  /**
   * The default display currency code for the store.
   * @member {String} defaultDisplayCurrencyCode
   */
  exports.prototype['defaultDisplayCurrencyCode'] = undefined;
  /**
   * The currency symbol of the default display currency for the store.
   * @member {String} defaultDisplayCurrencySymbol
   */
  exports.prototype['defaultDisplayCurrencySymbol'] = undefined;
  /**
   * The list of allowed currency codes for the store.
   * @member {Array.<String>} availableCurrencyCodes
   */
  exports.prototype['availableCurrencyCodes'] = undefined;
  /**
   * The list of exchange rate information for the store.
   * @member {Array.<module:model/DirectoryDataExchangeRateInterface>} exchangeRates
   */
  exports.prototype['exchangeRates'] = undefined;
  /**
   * @member {module:model/DirectoryDataCurrencyInformationExtensionInterface} extensionAttributes
   */
  exports.prototype['extensionAttributes'] = undefined;



  return exports;
}));


