/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.magento);
  }
}(this, function(expect, magento) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new magento.CatalogDataCategoryAttributeInterface();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CatalogDataCategoryAttributeInterface', function() {
    it('should create an instance of CatalogDataCategoryAttributeInterface', function() {
      // uncomment below and update the code to test CatalogDataCategoryAttributeInterface
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be.a(magento.CatalogDataCategoryAttributeInterface);
    });

    it('should have the property isWysiwygEnabled (base name: "isWysiwygEnabled")', function() {
      // uncomment below and update the code to test the property isWysiwygEnabled
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property isHtmlAllowedOnFront (base name: "isHtmlAllowedOnFront")', function() {
      // uncomment below and update the code to test the property isHtmlAllowedOnFront
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property usedForSortBy (base name: "usedForSortBy")', function() {
      // uncomment below and update the code to test the property usedForSortBy
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property isFilterable (base name: "isFilterable")', function() {
      // uncomment below and update the code to test the property isFilterable
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property isFilterableInSearch (base name: "isFilterableInSearch")', function() {
      // uncomment below and update the code to test the property isFilterableInSearch
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property isUsedInGrid (base name: "isUsedInGrid")', function() {
      // uncomment below and update the code to test the property isUsedInGrid
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property isVisibleInGrid (base name: "isVisibleInGrid")', function() {
      // uncomment below and update the code to test the property isVisibleInGrid
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property isFilterableInGrid (base name: "isFilterableInGrid")', function() {
      // uncomment below and update the code to test the property isFilterableInGrid
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property position (base name: "position")', function() {
      // uncomment below and update the code to test the property position
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property applyTo (base name: "applyTo")', function() {
      // uncomment below and update the code to test the property applyTo
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property isSearchable (base name: "isSearchable")', function() {
      // uncomment below and update the code to test the property isSearchable
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property isVisibleInAdvancedSearch (base name: "isVisibleInAdvancedSearch")', function() {
      // uncomment below and update the code to test the property isVisibleInAdvancedSearch
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property isComparable (base name: "isComparable")', function() {
      // uncomment below and update the code to test the property isComparable
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property isUsedForPromoRules (base name: "isUsedForPromoRules")', function() {
      // uncomment below and update the code to test the property isUsedForPromoRules
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property isVisibleOnFront (base name: "isVisibleOnFront")', function() {
      // uncomment below and update the code to test the property isVisibleOnFront
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property usedInProductListing (base name: "usedInProductListing")', function() {
      // uncomment below and update the code to test the property usedInProductListing
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property isVisible (base name: "isVisible")', function() {
      // uncomment below and update the code to test the property isVisible
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property scope (base name: "scope")', function() {
      // uncomment below and update the code to test the property scope
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property extensionAttributes (base name: "extensionAttributes")', function() {
      // uncomment below and update the code to test the property extensionAttributes
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property attributeId (base name: "attributeId")', function() {
      // uncomment below and update the code to test the property attributeId
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property attributeCode (base name: "attributeCode")', function() {
      // uncomment below and update the code to test the property attributeCode
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property frontendInput (base name: "frontendInput")', function() {
      // uncomment below and update the code to test the property frontendInput
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property entityTypeId (base name: "entityTypeId")', function() {
      // uncomment below and update the code to test the property entityTypeId
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property isRequired (base name: "isRequired")', function() {
      // uncomment below and update the code to test the property isRequired
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property options (base name: "options")', function() {
      // uncomment below and update the code to test the property options
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property isUserDefined (base name: "isUserDefined")', function() {
      // uncomment below and update the code to test the property isUserDefined
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property defaultFrontendLabel (base name: "defaultFrontendLabel")', function() {
      // uncomment below and update the code to test the property defaultFrontendLabel
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property frontendLabels (base name: "frontendLabels")', function() {
      // uncomment below and update the code to test the property frontendLabels
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property note (base name: "note")', function() {
      // uncomment below and update the code to test the property note
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property backendType (base name: "backendType")', function() {
      // uncomment below and update the code to test the property backendType
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property backendModel (base name: "backendModel")', function() {
      // uncomment below and update the code to test the property backendModel
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property sourceModel (base name: "sourceModel")', function() {
      // uncomment below and update the code to test the property sourceModel
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property defaultValue (base name: "defaultValue")', function() {
      // uncomment below and update the code to test the property defaultValue
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property isUnique (base name: "isUnique")', function() {
      // uncomment below and update the code to test the property isUnique
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property frontendClass (base name: "frontendClass")', function() {
      // uncomment below and update the code to test the property frontendClass
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property validationRules (base name: "validationRules")', function() {
      // uncomment below and update the code to test the property validationRules
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

    it('should have the property customAttributes (base name: "customAttributes")', function() {
      // uncomment below and update the code to test the property customAttributes
      //var instane = new magento.CatalogDataCategoryAttributeInterface();
      //expect(instance).to.be();
    });

  });

}));
