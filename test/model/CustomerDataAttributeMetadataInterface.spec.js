/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.magento);
  }
}(this, function(expect, magento) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new magento.CustomerDataAttributeMetadataInterface();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CustomerDataAttributeMetadataInterface', function() {
    it('should create an instance of CustomerDataAttributeMetadataInterface', function() {
      // uncomment below and update the code to test CustomerDataAttributeMetadataInterface
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be.a(magento.CustomerDataAttributeMetadataInterface);
    });

    it('should have the property frontendInput (base name: "frontendInput")', function() {
      // uncomment below and update the code to test the property frontendInput
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property inputFilter (base name: "inputFilter")', function() {
      // uncomment below and update the code to test the property inputFilter
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property storeLabel (base name: "storeLabel")', function() {
      // uncomment below and update the code to test the property storeLabel
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property validationRules (base name: "validationRules")', function() {
      // uncomment below and update the code to test the property validationRules
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property multilineCount (base name: "multilineCount")', function() {
      // uncomment below and update the code to test the property multilineCount
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property visible (base name: "visible")', function() {
      // uncomment below and update the code to test the property visible
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property required (base name: "required")', function() {
      // uncomment below and update the code to test the property required
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property dataModel (base name: "dataModel")', function() {
      // uncomment below and update the code to test the property dataModel
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property options (base name: "options")', function() {
      // uncomment below and update the code to test the property options
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property frontendClass (base name: "frontendClass")', function() {
      // uncomment below and update the code to test the property frontendClass
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property userDefined (base name: "userDefined")', function() {
      // uncomment below and update the code to test the property userDefined
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property sortOrder (base name: "sortOrder")', function() {
      // uncomment below and update the code to test the property sortOrder
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property frontendLabel (base name: "frontendLabel")', function() {
      // uncomment below and update the code to test the property frontendLabel
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property note (base name: "note")', function() {
      // uncomment below and update the code to test the property note
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property system (base name: "system")', function() {
      // uncomment below and update the code to test the property system
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property backendType (base name: "backendType")', function() {
      // uncomment below and update the code to test the property backendType
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property isUsedInGrid (base name: "isUsedInGrid")', function() {
      // uncomment below and update the code to test the property isUsedInGrid
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property isVisibleInGrid (base name: "isVisibleInGrid")', function() {
      // uncomment below and update the code to test the property isVisibleInGrid
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property isFilterableInGrid (base name: "isFilterableInGrid")', function() {
      // uncomment below and update the code to test the property isFilterableInGrid
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property isSearchableInGrid (base name: "isSearchableInGrid")', function() {
      // uncomment below and update the code to test the property isSearchableInGrid
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property attributeCode (base name: "attributeCode")', function() {
      // uncomment below and update the code to test the property attributeCode
      //var instane = new magento.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

  });

}));
