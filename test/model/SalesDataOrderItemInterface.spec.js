/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.magento);
  }
}(this, function(expect, magento) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new magento.SalesDataOrderItemInterface();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SalesDataOrderItemInterface', function() {
    it('should create an instance of SalesDataOrderItemInterface', function() {
      // uncomment below and update the code to test SalesDataOrderItemInterface
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be.a(magento.SalesDataOrderItemInterface);
    });

    it('should have the property additionalData (base name: "additionalData")', function() {
      // uncomment below and update the code to test the property additionalData
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property amountRefunded (base name: "amountRefunded")', function() {
      // uncomment below and update the code to test the property amountRefunded
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property appliedRuleIds (base name: "appliedRuleIds")', function() {
      // uncomment below and update the code to test the property appliedRuleIds
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseAmountRefunded (base name: "baseAmountRefunded")', function() {
      // uncomment below and update the code to test the property baseAmountRefunded
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseCost (base name: "baseCost")', function() {
      // uncomment below and update the code to test the property baseCost
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountAmount (base name: "baseDiscountAmount")', function() {
      // uncomment below and update the code to test the property baseDiscountAmount
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountInvoiced (base name: "baseDiscountInvoiced")', function() {
      // uncomment below and update the code to test the property baseDiscountInvoiced
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountRefunded (base name: "baseDiscountRefunded")', function() {
      // uncomment below and update the code to test the property baseDiscountRefunded
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountTaxCompensationAmount (base name: "baseDiscountTaxCompensationAmount")', function() {
      // uncomment below and update the code to test the property baseDiscountTaxCompensationAmount
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountTaxCompensationInvoiced (base name: "baseDiscountTaxCompensationInvoiced")', function() {
      // uncomment below and update the code to test the property baseDiscountTaxCompensationInvoiced
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountTaxCompensationRefunded (base name: "baseDiscountTaxCompensationRefunded")', function() {
      // uncomment below and update the code to test the property baseDiscountTaxCompensationRefunded
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseOriginalPrice (base name: "baseOriginalPrice")', function() {
      // uncomment below and update the code to test the property baseOriginalPrice
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property basePrice (base name: "basePrice")', function() {
      // uncomment below and update the code to test the property basePrice
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property basePriceInclTax (base name: "basePriceInclTax")', function() {
      // uncomment below and update the code to test the property basePriceInclTax
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseRowInvoiced (base name: "baseRowInvoiced")', function() {
      // uncomment below and update the code to test the property baseRowInvoiced
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseRowTotal (base name: "baseRowTotal")', function() {
      // uncomment below and update the code to test the property baseRowTotal
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseRowTotalInclTax (base name: "baseRowTotalInclTax")', function() {
      // uncomment below and update the code to test the property baseRowTotalInclTax
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTaxAmount (base name: "baseTaxAmount")', function() {
      // uncomment below and update the code to test the property baseTaxAmount
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTaxBeforeDiscount (base name: "baseTaxBeforeDiscount")', function() {
      // uncomment below and update the code to test the property baseTaxBeforeDiscount
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTaxInvoiced (base name: "baseTaxInvoiced")', function() {
      // uncomment below and update the code to test the property baseTaxInvoiced
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTaxRefunded (base name: "baseTaxRefunded")', function() {
      // uncomment below and update the code to test the property baseTaxRefunded
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseWeeeTaxAppliedAmount (base name: "baseWeeeTaxAppliedAmount")', function() {
      // uncomment below and update the code to test the property baseWeeeTaxAppliedAmount
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseWeeeTaxAppliedRowAmnt (base name: "baseWeeeTaxAppliedRowAmnt")', function() {
      // uncomment below and update the code to test the property baseWeeeTaxAppliedRowAmnt
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseWeeeTaxDisposition (base name: "baseWeeeTaxDisposition")', function() {
      // uncomment below and update the code to test the property baseWeeeTaxDisposition
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseWeeeTaxRowDisposition (base name: "baseWeeeTaxRowDisposition")', function() {
      // uncomment below and update the code to test the property baseWeeeTaxRowDisposition
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountAmount (base name: "discountAmount")', function() {
      // uncomment below and update the code to test the property discountAmount
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountInvoiced (base name: "discountInvoiced")', function() {
      // uncomment below and update the code to test the property discountInvoiced
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountPercent (base name: "discountPercent")', function() {
      // uncomment below and update the code to test the property discountPercent
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountRefunded (base name: "discountRefunded")', function() {
      // uncomment below and update the code to test the property discountRefunded
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property eventId (base name: "eventId")', function() {
      // uncomment below and update the code to test the property eventId
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property extOrderItemId (base name: "extOrderItemId")', function() {
      // uncomment below and update the code to test the property extOrderItemId
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property freeShipping (base name: "freeShipping")', function() {
      // uncomment below and update the code to test the property freeShipping
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwBasePrice (base name: "gwBasePrice")', function() {
      // uncomment below and update the code to test the property gwBasePrice
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwBasePriceInvoiced (base name: "gwBasePriceInvoiced")', function() {
      // uncomment below and update the code to test the property gwBasePriceInvoiced
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwBasePriceRefunded (base name: "gwBasePriceRefunded")', function() {
      // uncomment below and update the code to test the property gwBasePriceRefunded
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwBaseTaxAmount (base name: "gwBaseTaxAmount")', function() {
      // uncomment below and update the code to test the property gwBaseTaxAmount
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwBaseTaxAmountInvoiced (base name: "gwBaseTaxAmountInvoiced")', function() {
      // uncomment below and update the code to test the property gwBaseTaxAmountInvoiced
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwBaseTaxAmountRefunded (base name: "gwBaseTaxAmountRefunded")', function() {
      // uncomment below and update the code to test the property gwBaseTaxAmountRefunded
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwId (base name: "gwId")', function() {
      // uncomment below and update the code to test the property gwId
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwPrice (base name: "gwPrice")', function() {
      // uncomment below and update the code to test the property gwPrice
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwPriceInvoiced (base name: "gwPriceInvoiced")', function() {
      // uncomment below and update the code to test the property gwPriceInvoiced
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwPriceRefunded (base name: "gwPriceRefunded")', function() {
      // uncomment below and update the code to test the property gwPriceRefunded
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwTaxAmount (base name: "gwTaxAmount")', function() {
      // uncomment below and update the code to test the property gwTaxAmount
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwTaxAmountInvoiced (base name: "gwTaxAmountInvoiced")', function() {
      // uncomment below and update the code to test the property gwTaxAmountInvoiced
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwTaxAmountRefunded (base name: "gwTaxAmountRefunded")', function() {
      // uncomment below and update the code to test the property gwTaxAmountRefunded
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountTaxCompensationAmount (base name: "discountTaxCompensationAmount")', function() {
      // uncomment below and update the code to test the property discountTaxCompensationAmount
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountTaxCompensationCanceled (base name: "discountTaxCompensationCanceled")', function() {
      // uncomment below and update the code to test the property discountTaxCompensationCanceled
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountTaxCompensationInvoiced (base name: "discountTaxCompensationInvoiced")', function() {
      // uncomment below and update the code to test the property discountTaxCompensationInvoiced
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountTaxCompensationRefunded (base name: "discountTaxCompensationRefunded")', function() {
      // uncomment below and update the code to test the property discountTaxCompensationRefunded
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property isQtyDecimal (base name: "isQtyDecimal")', function() {
      // uncomment below and update the code to test the property isQtyDecimal
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property isVirtual (base name: "isVirtual")', function() {
      // uncomment below and update the code to test the property isVirtual
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property itemId (base name: "itemId")', function() {
      // uncomment below and update the code to test the property itemId
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property lockedDoInvoice (base name: "lockedDoInvoice")', function() {
      // uncomment below and update the code to test the property lockedDoInvoice
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property lockedDoShip (base name: "lockedDoShip")', function() {
      // uncomment below and update the code to test the property lockedDoShip
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property noDiscount (base name: "noDiscount")', function() {
      // uncomment below and update the code to test the property noDiscount
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property orderId (base name: "orderId")', function() {
      // uncomment below and update the code to test the property orderId
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property originalPrice (base name: "originalPrice")', function() {
      // uncomment below and update the code to test the property originalPrice
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property parentItemId (base name: "parentItemId")', function() {
      // uncomment below and update the code to test the property parentItemId
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "price")', function() {
      // uncomment below and update the code to test the property price
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property priceInclTax (base name: "priceInclTax")', function() {
      // uncomment below and update the code to test the property priceInclTax
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property productId (base name: "productId")', function() {
      // uncomment below and update the code to test the property productId
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property productType (base name: "productType")', function() {
      // uncomment below and update the code to test the property productType
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property qtyBackordered (base name: "qtyBackordered")', function() {
      // uncomment below and update the code to test the property qtyBackordered
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property qtyCanceled (base name: "qtyCanceled")', function() {
      // uncomment below and update the code to test the property qtyCanceled
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property qtyInvoiced (base name: "qtyInvoiced")', function() {
      // uncomment below and update the code to test the property qtyInvoiced
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property qtyOrdered (base name: "qtyOrdered")', function() {
      // uncomment below and update the code to test the property qtyOrdered
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property qtyRefunded (base name: "qtyRefunded")', function() {
      // uncomment below and update the code to test the property qtyRefunded
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property qtyReturned (base name: "qtyReturned")', function() {
      // uncomment below and update the code to test the property qtyReturned
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property qtyShipped (base name: "qtyShipped")', function() {
      // uncomment below and update the code to test the property qtyShipped
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property quoteItemId (base name: "quoteItemId")', function() {
      // uncomment below and update the code to test the property quoteItemId
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property rowInvoiced (base name: "rowInvoiced")', function() {
      // uncomment below and update the code to test the property rowInvoiced
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property rowTotal (base name: "rowTotal")', function() {
      // uncomment below and update the code to test the property rowTotal
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property rowTotalInclTax (base name: "rowTotalInclTax")', function() {
      // uncomment below and update the code to test the property rowTotalInclTax
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property rowWeight (base name: "rowWeight")', function() {
      // uncomment below and update the code to test the property rowWeight
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property sku (base name: "sku")', function() {
      // uncomment below and update the code to test the property sku
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property storeId (base name: "storeId")', function() {
      // uncomment below and update the code to test the property storeId
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property taxAmount (base name: "taxAmount")', function() {
      // uncomment below and update the code to test the property taxAmount
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property taxBeforeDiscount (base name: "taxBeforeDiscount")', function() {
      // uncomment below and update the code to test the property taxBeforeDiscount
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property taxCanceled (base name: "taxCanceled")', function() {
      // uncomment below and update the code to test the property taxCanceled
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property taxInvoiced (base name: "taxInvoiced")', function() {
      // uncomment below and update the code to test the property taxInvoiced
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property taxPercent (base name: "taxPercent")', function() {
      // uncomment below and update the code to test the property taxPercent
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property taxRefunded (base name: "taxRefunded")', function() {
      // uncomment below and update the code to test the property taxRefunded
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updatedAt")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property weeeTaxApplied (base name: "weeeTaxApplied")', function() {
      // uncomment below and update the code to test the property weeeTaxApplied
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property weeeTaxAppliedAmount (base name: "weeeTaxAppliedAmount")', function() {
      // uncomment below and update the code to test the property weeeTaxAppliedAmount
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property weeeTaxAppliedRowAmount (base name: "weeeTaxAppliedRowAmount")', function() {
      // uncomment below and update the code to test the property weeeTaxAppliedRowAmount
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property weeeTaxDisposition (base name: "weeeTaxDisposition")', function() {
      // uncomment below and update the code to test the property weeeTaxDisposition
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property weeeTaxRowDisposition (base name: "weeeTaxRowDisposition")', function() {
      // uncomment below and update the code to test the property weeeTaxRowDisposition
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property weight (base name: "weight")', function() {
      // uncomment below and update the code to test the property weight
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property parentItem (base name: "parentItem")', function() {
      // uncomment below and update the code to test the property parentItem
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property productOption (base name: "productOption")', function() {
      // uncomment below and update the code to test the property productOption
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property extensionAttributes (base name: "extensionAttributes")', function() {
      // uncomment below and update the code to test the property extensionAttributes
      //var instane = new magento.SalesDataOrderItemInterface();
      //expect(instance).to.be();
    });

  });

}));
