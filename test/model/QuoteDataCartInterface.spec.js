/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.magento);
  }
}(this, function(expect, magento) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new magento.QuoteDataCartInterface();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('QuoteDataCartInterface', function() {
    it('should create an instance of QuoteDataCartInterface', function() {
      // uncomment below and update the code to test QuoteDataCartInterface
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be.a(magento.QuoteDataCartInterface);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updatedAt")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property convertedAt (base name: "convertedAt")', function() {
      // uncomment below and update the code to test the property convertedAt
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property isActive (base name: "isActive")', function() {
      // uncomment below and update the code to test the property isActive
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property isVirtual (base name: "isVirtual")', function() {
      // uncomment below and update the code to test the property isVirtual
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property items (base name: "items")', function() {
      // uncomment below and update the code to test the property items
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property itemsCount (base name: "itemsCount")', function() {
      // uncomment below and update the code to test the property itemsCount
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property itemsQty (base name: "itemsQty")', function() {
      // uncomment below and update the code to test the property itemsQty
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property customer (base name: "customer")', function() {
      // uncomment below and update the code to test the property customer
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property billingAddress (base name: "billingAddress")', function() {
      // uncomment below and update the code to test the property billingAddress
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property reservedOrderId (base name: "reservedOrderId")', function() {
      // uncomment below and update the code to test the property reservedOrderId
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property origOrderId (base name: "origOrderId")', function() {
      // uncomment below and update the code to test the property origOrderId
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerIsGuest (base name: "customerIsGuest")', function() {
      // uncomment below and update the code to test the property customerIsGuest
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerNote (base name: "customerNote")', function() {
      // uncomment below and update the code to test the property customerNote
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerNoteNotify (base name: "customerNoteNotify")', function() {
      // uncomment below and update the code to test the property customerNoteNotify
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerTaxClassId (base name: "customerTaxClassId")', function() {
      // uncomment below and update the code to test the property customerTaxClassId
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property storeId (base name: "storeId")', function() {
      // uncomment below and update the code to test the property storeId
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

    it('should have the property extensionAttributes (base name: "extensionAttributes")', function() {
      // uncomment below and update the code to test the property extensionAttributes
      //var instane = new magento.QuoteDataCartInterface();
      //expect(instance).to.be();
    });

  });

}));
