/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.magento);
  }
}(this, function(expect, magento) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new magento.SalesDataOrderInterface();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SalesDataOrderInterface', function() {
    it('should create an instance of SalesDataOrderInterface', function() {
      // uncomment below and update the code to test SalesDataOrderInterface
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be.a(magento.SalesDataOrderInterface);
    });

    it('should have the property adjustmentNegative (base name: "adjustmentNegative")', function() {
      // uncomment below and update the code to test the property adjustmentNegative
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property adjustmentPositive (base name: "adjustmentPositive")', function() {
      // uncomment below and update the code to test the property adjustmentPositive
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property appliedRuleIds (base name: "appliedRuleIds")', function() {
      // uncomment below and update the code to test the property appliedRuleIds
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseAdjustmentNegative (base name: "baseAdjustmentNegative")', function() {
      // uncomment below and update the code to test the property baseAdjustmentNegative
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseAdjustmentPositive (base name: "baseAdjustmentPositive")', function() {
      // uncomment below and update the code to test the property baseAdjustmentPositive
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseCurrencyCode (base name: "baseCurrencyCode")', function() {
      // uncomment below and update the code to test the property baseCurrencyCode
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountAmount (base name: "baseDiscountAmount")', function() {
      // uncomment below and update the code to test the property baseDiscountAmount
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountCanceled (base name: "baseDiscountCanceled")', function() {
      // uncomment below and update the code to test the property baseDiscountCanceled
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountInvoiced (base name: "baseDiscountInvoiced")', function() {
      // uncomment below and update the code to test the property baseDiscountInvoiced
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountRefunded (base name: "baseDiscountRefunded")', function() {
      // uncomment below and update the code to test the property baseDiscountRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseGrandTotal (base name: "baseGrandTotal")', function() {
      // uncomment below and update the code to test the property baseGrandTotal
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountTaxCompensationAmount (base name: "baseDiscountTaxCompensationAmount")', function() {
      // uncomment below and update the code to test the property baseDiscountTaxCompensationAmount
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountTaxCompensationInvoiced (base name: "baseDiscountTaxCompensationInvoiced")', function() {
      // uncomment below and update the code to test the property baseDiscountTaxCompensationInvoiced
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountTaxCompensationRefunded (base name: "baseDiscountTaxCompensationRefunded")', function() {
      // uncomment below and update the code to test the property baseDiscountTaxCompensationRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingAmount (base name: "baseShippingAmount")', function() {
      // uncomment below and update the code to test the property baseShippingAmount
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingCanceled (base name: "baseShippingCanceled")', function() {
      // uncomment below and update the code to test the property baseShippingCanceled
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingDiscountAmount (base name: "baseShippingDiscountAmount")', function() {
      // uncomment below and update the code to test the property baseShippingDiscountAmount
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingDiscountTaxCompensationAmnt (base name: "baseShippingDiscountTaxCompensationAmnt")', function() {
      // uncomment below and update the code to test the property baseShippingDiscountTaxCompensationAmnt
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingInclTax (base name: "baseShippingInclTax")', function() {
      // uncomment below and update the code to test the property baseShippingInclTax
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingInvoiced (base name: "baseShippingInvoiced")', function() {
      // uncomment below and update the code to test the property baseShippingInvoiced
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingRefunded (base name: "baseShippingRefunded")', function() {
      // uncomment below and update the code to test the property baseShippingRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingTaxAmount (base name: "baseShippingTaxAmount")', function() {
      // uncomment below and update the code to test the property baseShippingTaxAmount
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingTaxRefunded (base name: "baseShippingTaxRefunded")', function() {
      // uncomment below and update the code to test the property baseShippingTaxRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseSubtotal (base name: "baseSubtotal")', function() {
      // uncomment below and update the code to test the property baseSubtotal
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseSubtotalCanceled (base name: "baseSubtotalCanceled")', function() {
      // uncomment below and update the code to test the property baseSubtotalCanceled
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseSubtotalInclTax (base name: "baseSubtotalInclTax")', function() {
      // uncomment below and update the code to test the property baseSubtotalInclTax
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseSubtotalInvoiced (base name: "baseSubtotalInvoiced")', function() {
      // uncomment below and update the code to test the property baseSubtotalInvoiced
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseSubtotalRefunded (base name: "baseSubtotalRefunded")', function() {
      // uncomment below and update the code to test the property baseSubtotalRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTaxAmount (base name: "baseTaxAmount")', function() {
      // uncomment below and update the code to test the property baseTaxAmount
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTaxCanceled (base name: "baseTaxCanceled")', function() {
      // uncomment below and update the code to test the property baseTaxCanceled
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTaxInvoiced (base name: "baseTaxInvoiced")', function() {
      // uncomment below and update the code to test the property baseTaxInvoiced
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTaxRefunded (base name: "baseTaxRefunded")', function() {
      // uncomment below and update the code to test the property baseTaxRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalCanceled (base name: "baseTotalCanceled")', function() {
      // uncomment below and update the code to test the property baseTotalCanceled
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalDue (base name: "baseTotalDue")', function() {
      // uncomment below and update the code to test the property baseTotalDue
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalInvoiced (base name: "baseTotalInvoiced")', function() {
      // uncomment below and update the code to test the property baseTotalInvoiced
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalInvoicedCost (base name: "baseTotalInvoicedCost")', function() {
      // uncomment below and update the code to test the property baseTotalInvoicedCost
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalOfflineRefunded (base name: "baseTotalOfflineRefunded")', function() {
      // uncomment below and update the code to test the property baseTotalOfflineRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalOnlineRefunded (base name: "baseTotalOnlineRefunded")', function() {
      // uncomment below and update the code to test the property baseTotalOnlineRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalPaid (base name: "baseTotalPaid")', function() {
      // uncomment below and update the code to test the property baseTotalPaid
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalQtyOrdered (base name: "baseTotalQtyOrdered")', function() {
      // uncomment below and update the code to test the property baseTotalQtyOrdered
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalRefunded (base name: "baseTotalRefunded")', function() {
      // uncomment below and update the code to test the property baseTotalRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseToGlobalRate (base name: "baseToGlobalRate")', function() {
      // uncomment below and update the code to test the property baseToGlobalRate
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseToOrderRate (base name: "baseToOrderRate")', function() {
      // uncomment below and update the code to test the property baseToOrderRate
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property billingAddressId (base name: "billingAddressId")', function() {
      // uncomment below and update the code to test the property billingAddressId
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property canShipPartially (base name: "canShipPartially")', function() {
      // uncomment below and update the code to test the property canShipPartially
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property canShipPartiallyItem (base name: "canShipPartiallyItem")', function() {
      // uncomment below and update the code to test the property canShipPartiallyItem
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property couponCode (base name: "couponCode")', function() {
      // uncomment below and update the code to test the property couponCode
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerDob (base name: "customerDob")', function() {
      // uncomment below and update the code to test the property customerDob
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerEmail (base name: "customerEmail")', function() {
      // uncomment below and update the code to test the property customerEmail
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerFirstname (base name: "customerFirstname")', function() {
      // uncomment below and update the code to test the property customerFirstname
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerGender (base name: "customerGender")', function() {
      // uncomment below and update the code to test the property customerGender
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerGroupId (base name: "customerGroupId")', function() {
      // uncomment below and update the code to test the property customerGroupId
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerId (base name: "customerId")', function() {
      // uncomment below and update the code to test the property customerId
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerIsGuest (base name: "customerIsGuest")', function() {
      // uncomment below and update the code to test the property customerIsGuest
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerLastname (base name: "customerLastname")', function() {
      // uncomment below and update the code to test the property customerLastname
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerMiddlename (base name: "customerMiddlename")', function() {
      // uncomment below and update the code to test the property customerMiddlename
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerNote (base name: "customerNote")', function() {
      // uncomment below and update the code to test the property customerNote
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerNoteNotify (base name: "customerNoteNotify")', function() {
      // uncomment below and update the code to test the property customerNoteNotify
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerPrefix (base name: "customerPrefix")', function() {
      // uncomment below and update the code to test the property customerPrefix
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerSuffix (base name: "customerSuffix")', function() {
      // uncomment below and update the code to test the property customerSuffix
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerTaxvat (base name: "customerTaxvat")', function() {
      // uncomment below and update the code to test the property customerTaxvat
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountAmount (base name: "discountAmount")', function() {
      // uncomment below and update the code to test the property discountAmount
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountCanceled (base name: "discountCanceled")', function() {
      // uncomment below and update the code to test the property discountCanceled
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountDescription (base name: "discountDescription")', function() {
      // uncomment below and update the code to test the property discountDescription
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountInvoiced (base name: "discountInvoiced")', function() {
      // uncomment below and update the code to test the property discountInvoiced
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountRefunded (base name: "discountRefunded")', function() {
      // uncomment below and update the code to test the property discountRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property editIncrement (base name: "editIncrement")', function() {
      // uncomment below and update the code to test the property editIncrement
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property emailSent (base name: "emailSent")', function() {
      // uncomment below and update the code to test the property emailSent
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property entityId (base name: "entityId")', function() {
      // uncomment below and update the code to test the property entityId
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property extCustomerId (base name: "extCustomerId")', function() {
      // uncomment below and update the code to test the property extCustomerId
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property extOrderId (base name: "extOrderId")', function() {
      // uncomment below and update the code to test the property extOrderId
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property forcedShipmentWithInvoice (base name: "forcedShipmentWithInvoice")', function() {
      // uncomment below and update the code to test the property forcedShipmentWithInvoice
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property globalCurrencyCode (base name: "globalCurrencyCode")', function() {
      // uncomment below and update the code to test the property globalCurrencyCode
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property grandTotal (base name: "grandTotal")', function() {
      // uncomment below and update the code to test the property grandTotal
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountTaxCompensationAmount (base name: "discountTaxCompensationAmount")', function() {
      // uncomment below and update the code to test the property discountTaxCompensationAmount
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountTaxCompensationInvoiced (base name: "discountTaxCompensationInvoiced")', function() {
      // uncomment below and update the code to test the property discountTaxCompensationInvoiced
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountTaxCompensationRefunded (base name: "discountTaxCompensationRefunded")', function() {
      // uncomment below and update the code to test the property discountTaxCompensationRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property holdBeforeState (base name: "holdBeforeState")', function() {
      // uncomment below and update the code to test the property holdBeforeState
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property holdBeforeStatus (base name: "holdBeforeStatus")', function() {
      // uncomment below and update the code to test the property holdBeforeStatus
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property incrementId (base name: "incrementId")', function() {
      // uncomment below and update the code to test the property incrementId
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property isVirtual (base name: "isVirtual")', function() {
      // uncomment below and update the code to test the property isVirtual
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property orderCurrencyCode (base name: "orderCurrencyCode")', function() {
      // uncomment below and update the code to test the property orderCurrencyCode
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property originalIncrementId (base name: "originalIncrementId")', function() {
      // uncomment below and update the code to test the property originalIncrementId
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property paymentAuthorizationAmount (base name: "paymentAuthorizationAmount")', function() {
      // uncomment below and update the code to test the property paymentAuthorizationAmount
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property paymentAuthExpiration (base name: "paymentAuthExpiration")', function() {
      // uncomment below and update the code to test the property paymentAuthExpiration
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property protectCode (base name: "protectCode")', function() {
      // uncomment below and update the code to test the property protectCode
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property quoteAddressId (base name: "quoteAddressId")', function() {
      // uncomment below and update the code to test the property quoteAddressId
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property quoteId (base name: "quoteId")', function() {
      // uncomment below and update the code to test the property quoteId
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property relationChildId (base name: "relationChildId")', function() {
      // uncomment below and update the code to test the property relationChildId
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property relationChildRealId (base name: "relationChildRealId")', function() {
      // uncomment below and update the code to test the property relationChildRealId
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property relationParentId (base name: "relationParentId")', function() {
      // uncomment below and update the code to test the property relationParentId
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property relationParentRealId (base name: "relationParentRealId")', function() {
      // uncomment below and update the code to test the property relationParentRealId
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property remoteIp (base name: "remoteIp")', function() {
      // uncomment below and update the code to test the property remoteIp
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingAmount (base name: "shippingAmount")', function() {
      // uncomment below and update the code to test the property shippingAmount
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingCanceled (base name: "shippingCanceled")', function() {
      // uncomment below and update the code to test the property shippingCanceled
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingDescription (base name: "shippingDescription")', function() {
      // uncomment below and update the code to test the property shippingDescription
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingDiscountAmount (base name: "shippingDiscountAmount")', function() {
      // uncomment below and update the code to test the property shippingDiscountAmount
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingDiscountTaxCompensationAmount (base name: "shippingDiscountTaxCompensationAmount")', function() {
      // uncomment below and update the code to test the property shippingDiscountTaxCompensationAmount
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingInclTax (base name: "shippingInclTax")', function() {
      // uncomment below and update the code to test the property shippingInclTax
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingInvoiced (base name: "shippingInvoiced")', function() {
      // uncomment below and update the code to test the property shippingInvoiced
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingRefunded (base name: "shippingRefunded")', function() {
      // uncomment below and update the code to test the property shippingRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingTaxAmount (base name: "shippingTaxAmount")', function() {
      // uncomment below and update the code to test the property shippingTaxAmount
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingTaxRefunded (base name: "shippingTaxRefunded")', function() {
      // uncomment below and update the code to test the property shippingTaxRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property storeCurrencyCode (base name: "storeCurrencyCode")', function() {
      // uncomment below and update the code to test the property storeCurrencyCode
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property storeId (base name: "storeId")', function() {
      // uncomment below and update the code to test the property storeId
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property storeName (base name: "storeName")', function() {
      // uncomment below and update the code to test the property storeName
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property storeToBaseRate (base name: "storeToBaseRate")', function() {
      // uncomment below and update the code to test the property storeToBaseRate
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property storeToOrderRate (base name: "storeToOrderRate")', function() {
      // uncomment below and update the code to test the property storeToOrderRate
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property subtotal (base name: "subtotal")', function() {
      // uncomment below and update the code to test the property subtotal
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property subtotalCanceled (base name: "subtotalCanceled")', function() {
      // uncomment below and update the code to test the property subtotalCanceled
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property subtotalInclTax (base name: "subtotalInclTax")', function() {
      // uncomment below and update the code to test the property subtotalInclTax
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property subtotalInvoiced (base name: "subtotalInvoiced")', function() {
      // uncomment below and update the code to test the property subtotalInvoiced
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property subtotalRefunded (base name: "subtotalRefunded")', function() {
      // uncomment below and update the code to test the property subtotalRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property taxAmount (base name: "taxAmount")', function() {
      // uncomment below and update the code to test the property taxAmount
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property taxCanceled (base name: "taxCanceled")', function() {
      // uncomment below and update the code to test the property taxCanceled
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property taxInvoiced (base name: "taxInvoiced")', function() {
      // uncomment below and update the code to test the property taxInvoiced
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property taxRefunded (base name: "taxRefunded")', function() {
      // uncomment below and update the code to test the property taxRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalCanceled (base name: "totalCanceled")', function() {
      // uncomment below and update the code to test the property totalCanceled
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalDue (base name: "totalDue")', function() {
      // uncomment below and update the code to test the property totalDue
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalInvoiced (base name: "totalInvoiced")', function() {
      // uncomment below and update the code to test the property totalInvoiced
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalItemCount (base name: "totalItemCount")', function() {
      // uncomment below and update the code to test the property totalItemCount
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalOfflineRefunded (base name: "totalOfflineRefunded")', function() {
      // uncomment below and update the code to test the property totalOfflineRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalOnlineRefunded (base name: "totalOnlineRefunded")', function() {
      // uncomment below and update the code to test the property totalOnlineRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalPaid (base name: "totalPaid")', function() {
      // uncomment below and update the code to test the property totalPaid
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalQtyOrdered (base name: "totalQtyOrdered")', function() {
      // uncomment below and update the code to test the property totalQtyOrdered
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalRefunded (base name: "totalRefunded")', function() {
      // uncomment below and update the code to test the property totalRefunded
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updatedAt")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property weight (base name: "weight")', function() {
      // uncomment below and update the code to test the property weight
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property xForwardedFor (base name: "xForwardedFor")', function() {
      // uncomment below and update the code to test the property xForwardedFor
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property items (base name: "items")', function() {
      // uncomment below and update the code to test the property items
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property billingAddress (base name: "billingAddress")', function() {
      // uncomment below and update the code to test the property billingAddress
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property payment (base name: "payment")', function() {
      // uncomment below and update the code to test the property payment
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property statusHistories (base name: "statusHistories")', function() {
      // uncomment below and update the code to test the property statusHistories
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property extensionAttributes (base name: "extensionAttributes")', function() {
      // uncomment below and update the code to test the property extensionAttributes
      //var instane = new magento.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

  });

}));
