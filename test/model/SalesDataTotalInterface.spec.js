/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.magento);
  }
}(this, function(expect, magento) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new magento.SalesDataTotalInterface();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SalesDataTotalInterface', function() {
    it('should create an instance of SalesDataTotalInterface', function() {
      // uncomment below and update the code to test SalesDataTotalInterface
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be.a(magento.SalesDataTotalInterface);
    });

    it('should have the property baseShippingAmount (base name: "baseShippingAmount")', function() {
      // uncomment below and update the code to test the property baseShippingAmount
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingCanceled (base name: "baseShippingCanceled")', function() {
      // uncomment below and update the code to test the property baseShippingCanceled
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingDiscountAmount (base name: "baseShippingDiscountAmount")', function() {
      // uncomment below and update the code to test the property baseShippingDiscountAmount
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingDiscountTaxCompensationAmnt (base name: "baseShippingDiscountTaxCompensationAmnt")', function() {
      // uncomment below and update the code to test the property baseShippingDiscountTaxCompensationAmnt
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingInclTax (base name: "baseShippingInclTax")', function() {
      // uncomment below and update the code to test the property baseShippingInclTax
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingInvoiced (base name: "baseShippingInvoiced")', function() {
      // uncomment below and update the code to test the property baseShippingInvoiced
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingRefunded (base name: "baseShippingRefunded")', function() {
      // uncomment below and update the code to test the property baseShippingRefunded
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingTaxAmount (base name: "baseShippingTaxAmount")', function() {
      // uncomment below and update the code to test the property baseShippingTaxAmount
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingTaxRefunded (base name: "baseShippingTaxRefunded")', function() {
      // uncomment below and update the code to test the property baseShippingTaxRefunded
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingAmount (base name: "shippingAmount")', function() {
      // uncomment below and update the code to test the property shippingAmount
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingCanceled (base name: "shippingCanceled")', function() {
      // uncomment below and update the code to test the property shippingCanceled
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingDiscountAmount (base name: "shippingDiscountAmount")', function() {
      // uncomment below and update the code to test the property shippingDiscountAmount
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingDiscountTaxCompensationAmount (base name: "shippingDiscountTaxCompensationAmount")', function() {
      // uncomment below and update the code to test the property shippingDiscountTaxCompensationAmount
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingInclTax (base name: "shippingInclTax")', function() {
      // uncomment below and update the code to test the property shippingInclTax
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingInvoiced (base name: "shippingInvoiced")', function() {
      // uncomment below and update the code to test the property shippingInvoiced
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingRefunded (base name: "shippingRefunded")', function() {
      // uncomment below and update the code to test the property shippingRefunded
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingTaxAmount (base name: "shippingTaxAmount")', function() {
      // uncomment below and update the code to test the property shippingTaxAmount
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingTaxRefunded (base name: "shippingTaxRefunded")', function() {
      // uncomment below and update the code to test the property shippingTaxRefunded
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

    it('should have the property extensionAttributes (base name: "extensionAttributes")', function() {
      // uncomment below and update the code to test the property extensionAttributes
      //var instane = new magento.SalesDataTotalInterface();
      //expect(instance).to.be();
    });

  });

}));
