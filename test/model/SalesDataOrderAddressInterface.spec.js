/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.magento);
  }
}(this, function(expect, magento) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new magento.SalesDataOrderAddressInterface();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SalesDataOrderAddressInterface', function() {
    it('should create an instance of SalesDataOrderAddressInterface', function() {
      // uncomment below and update the code to test SalesDataOrderAddressInterface
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be.a(magento.SalesDataOrderAddressInterface);
    });

    it('should have the property addressType (base name: "addressType")', function() {
      // uncomment below and update the code to test the property addressType
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property company (base name: "company")', function() {
      // uncomment below and update the code to test the property company
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property countryId (base name: "countryId")', function() {
      // uncomment below and update the code to test the property countryId
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerAddressId (base name: "customerAddressId")', function() {
      // uncomment below and update the code to test the property customerAddressId
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerId (base name: "customerId")', function() {
      // uncomment below and update the code to test the property customerId
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property entityId (base name: "entityId")', function() {
      // uncomment below and update the code to test the property entityId
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property fax (base name: "fax")', function() {
      // uncomment below and update the code to test the property fax
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property firstname (base name: "firstname")', function() {
      // uncomment below and update the code to test the property firstname
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property lastname (base name: "lastname")', function() {
      // uncomment below and update the code to test the property lastname
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property middlename (base name: "middlename")', function() {
      // uncomment below and update the code to test the property middlename
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property parentId (base name: "parentId")', function() {
      // uncomment below and update the code to test the property parentId
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property postcode (base name: "postcode")', function() {
      // uncomment below and update the code to test the property postcode
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property prefix (base name: "prefix")', function() {
      // uncomment below and update the code to test the property prefix
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property region (base name: "region")', function() {
      // uncomment below and update the code to test the property region
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property regionCode (base name: "regionCode")', function() {
      // uncomment below and update the code to test the property regionCode
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property regionId (base name: "regionId")', function() {
      // uncomment below and update the code to test the property regionId
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property street (base name: "street")', function() {
      // uncomment below and update the code to test the property street
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property suffix (base name: "suffix")', function() {
      // uncomment below and update the code to test the property suffix
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property telephone (base name: "telephone")', function() {
      // uncomment below and update the code to test the property telephone
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property vatId (base name: "vatId")', function() {
      // uncomment below and update the code to test the property vatId
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property vatIsValid (base name: "vatIsValid")', function() {
      // uncomment below and update the code to test the property vatIsValid
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property vatRequestDate (base name: "vatRequestDate")', function() {
      // uncomment below and update the code to test the property vatRequestDate
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property vatRequestId (base name: "vatRequestId")', function() {
      // uncomment below and update the code to test the property vatRequestId
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property vatRequestSuccess (base name: "vatRequestSuccess")', function() {
      // uncomment below and update the code to test the property vatRequestSuccess
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

    it('should have the property extensionAttributes (base name: "extensionAttributes")', function() {
      // uncomment below and update the code to test the property extensionAttributes
      //var instane = new magento.SalesDataOrderAddressInterface();
      //expect(instance).to.be();
    });

  });

}));
