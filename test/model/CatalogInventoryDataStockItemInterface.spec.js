/**
 * Magento Enterprise Edition 2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.magento);
  }
}(this, function(expect, magento) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new magento.CatalogInventoryDataStockItemInterface();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CatalogInventoryDataStockItemInterface', function() {
    it('should create an instance of CatalogInventoryDataStockItemInterface', function() {
      // uncomment below and update the code to test CatalogInventoryDataStockItemInterface
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be.a(magento.CatalogInventoryDataStockItemInterface);
    });

    it('should have the property itemId (base name: "itemId")', function() {
      // uncomment below and update the code to test the property itemId
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property productId (base name: "productId")', function() {
      // uncomment below and update the code to test the property productId
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property stockId (base name: "stockId")', function() {
      // uncomment below and update the code to test the property stockId
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property qty (base name: "qty")', function() {
      // uncomment below and update the code to test the property qty
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property isInStock (base name: "isInStock")', function() {
      // uncomment below and update the code to test the property isInStock
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property isQtyDecimal (base name: "isQtyDecimal")', function() {
      // uncomment below and update the code to test the property isQtyDecimal
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property showDefaultNotificationMessage (base name: "showDefaultNotificationMessage")', function() {
      // uncomment below and update the code to test the property showDefaultNotificationMessage
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property useConfigMinQty (base name: "useConfigMinQty")', function() {
      // uncomment below and update the code to test the property useConfigMinQty
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property minQty (base name: "minQty")', function() {
      // uncomment below and update the code to test the property minQty
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property useConfigMinSaleQty (base name: "useConfigMinSaleQty")', function() {
      // uncomment below and update the code to test the property useConfigMinSaleQty
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property minSaleQty (base name: "minSaleQty")', function() {
      // uncomment below and update the code to test the property minSaleQty
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property useConfigMaxSaleQty (base name: "useConfigMaxSaleQty")', function() {
      // uncomment below and update the code to test the property useConfigMaxSaleQty
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property maxSaleQty (base name: "maxSaleQty")', function() {
      // uncomment below and update the code to test the property maxSaleQty
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property useConfigBackorders (base name: "useConfigBackorders")', function() {
      // uncomment below and update the code to test the property useConfigBackorders
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property backorders (base name: "backorders")', function() {
      // uncomment below and update the code to test the property backorders
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property useConfigNotifyStockQty (base name: "useConfigNotifyStockQty")', function() {
      // uncomment below and update the code to test the property useConfigNotifyStockQty
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property notifyStockQty (base name: "notifyStockQty")', function() {
      // uncomment below and update the code to test the property notifyStockQty
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property useConfigQtyIncrements (base name: "useConfigQtyIncrements")', function() {
      // uncomment below and update the code to test the property useConfigQtyIncrements
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property qtyIncrements (base name: "qtyIncrements")', function() {
      // uncomment below and update the code to test the property qtyIncrements
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property useConfigEnableQtyInc (base name: "useConfigEnableQtyInc")', function() {
      // uncomment below and update the code to test the property useConfigEnableQtyInc
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property enableQtyIncrements (base name: "enableQtyIncrements")', function() {
      // uncomment below and update the code to test the property enableQtyIncrements
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property useConfigManageStock (base name: "useConfigManageStock")', function() {
      // uncomment below and update the code to test the property useConfigManageStock
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property manageStock (base name: "manageStock")', function() {
      // uncomment below and update the code to test the property manageStock
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property lowStockDate (base name: "lowStockDate")', function() {
      // uncomment below and update the code to test the property lowStockDate
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property isDecimalDivided (base name: "isDecimalDivided")', function() {
      // uncomment below and update the code to test the property isDecimalDivided
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property stockStatusChangedAuto (base name: "stockStatusChangedAuto")', function() {
      // uncomment below and update the code to test the property stockStatusChangedAuto
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

    it('should have the property extensionAttributes (base name: "extensionAttributes")', function() {
      // uncomment below and update the code to test the property extensionAttributes
      //var instane = new magento.CatalogInventoryDataStockItemInterface();
      //expect(instance).to.be();
    });

  });

}));
